//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.7-dev+80f9709733f917490172ebc58358fe21c7caa737
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\github.com\FlorianGrimm\antlr4cs\test\runtime\TestHtml\html\HTMLParser.g4 by ANTLR 4.6.7-dev+80f9709733f917490172ebc58358fe21c7caa737

#pragma warning disable CS8669 // The annotation for nullable reference types should 

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TestHtml {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.7-dev+80f9709733f917490172ebc58358fe21c7caa737")]
public partial class HTMLParser : Parser {
	public const int
		HTML_COMMENT=1, HTML_CONDITIONAL_COMMENT=2, XML=3, CDATA=4, DTD=5, SCRIPTLET=6, 
		SEA_WS=7, SCRIPT_OPEN=8, STYLE_OPEN=9, TAG_OPEN=10, HTML_TEXT=11, TAG_CLOSE=12, 
		TAG_SLASH_CLOSE=13, TAG_SLASH=14, TAG_EQUALS=15, TAG_NAME=16, TAG_WHITESPACE=17, 
		SCRIPT_BODY=18, SCRIPT_SHORT_BODY=19, STYLE_BODY=20, STYLE_SHORT_BODY=21, 
		ATTVALUE_VALUE=22, ATTRIBUTE=23;
	public const int
		RULE_htmlDocument = 0, RULE_scriptletOrSeaWs = 1, RULE_htmlElements = 2, 
		RULE_htmlElement = 3, RULE_htmlContent = 4, RULE_htmlAttribute = 5, RULE_htmlChardata = 6, 
		RULE_htmlMisc = 7, RULE_htmlComment = 8, RULE_script = 9, RULE_style = 10;
	public static readonly string[] ruleNames = {
		"htmlDocument", "scriptletOrSeaWs", "htmlElements", "htmlElement", "htmlContent", 
		"htmlAttribute", "htmlChardata", "htmlMisc", "htmlComment", "script", 
		"style"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'<'", null, 
		"'>'", "'/>'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HTML_COMMENT", "HTML_CONDITIONAL_COMMENT", "XML", "CDATA", "DTD", 
		"SCRIPTLET", "SEA_WS", "SCRIPT_OPEN", "STYLE_OPEN", "TAG_OPEN", "HTML_TEXT", 
		"TAG_CLOSE", "TAG_SLASH_CLOSE", "TAG_SLASH", "TAG_EQUALS", "TAG_NAME", 
		"TAG_WHITESPACE", "SCRIPT_BODY", "SCRIPT_SHORT_BODY", "STYLE_BODY", "STYLE_SHORT_BODY", 
		"ATTVALUE_VALUE", "ATTRIBUTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HTMLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public HTMLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class HtmlDocumentContext : ParserRuleContext {
		public ScriptletOrSeaWsContext _scriptletOrSeaWs;
		public HtmlElementsContext _htmlElements;
		public ScriptletOrSeaWsContext[] scriptletOrSeaWs() {
			return GetRuleContexts<ScriptletOrSeaWsContext>();
		}
		public ScriptletOrSeaWsContext scriptletOrSeaWs(int i) {
			return GetRuleContext<ScriptletOrSeaWsContext>(i);
		}
		public ITerminalNode XML() { return GetToken(HTMLParser.XML, 0); }
		public ITerminalNode DTD() { return GetToken(HTMLParser.DTD, 0); }
		public HtmlElementsContext[] htmlElements() {
			return GetRuleContexts<HtmlElementsContext>();
		}
		public HtmlElementsContext htmlElements(int i) {
			return GetRuleContext<HtmlElementsContext>(i);
		}
		public HtmlDocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlDocument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlDocument(this);
		}
	}

	[RuleVersion(0)]
	public (HtmlDocumentContext, Exception? error) htmlDocument() {
		HtmlDocumentContext _localctx = new HtmlDocumentContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 0, RULE_htmlDocument);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: StarBlock */
			    this.State = 25;
			    _errHandler.Sync(this);
			    _alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			    while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
			    	if ( _alt==1 ) {
			    		{
			    		/* STG: CodeBlockForAlt */
			    			/* STG: locals */
			    			/* STG: preamble */
			    			/* STG: ops */
			    		    {
			    		    /* STG: CodeBlockForAlt */
			    		    	/* STG: locals */
			    		    	/* STG: preamble */
			    		    	/* STG: ops */
			    		        /* STG: InvokeRule */
			    		        {
			    		        	this.State = 22; 
			    		        	(var subCtx, _localError) = scriptletOrSeaWs();
			    		        	if (_localError is not null) {
			    		        		if (_localError is RecognitionException re) {
			    		        			_localctx.exception = re;
			    		        			_errHandler.ReportError(this, re);
			    		        			_errHandler.Recover(this, re);
			    		        			return (_localctx, _localError);
			    		        		} else {
			    		        			throw _localError;
			    		        		}
			    		            } else {
			    		        		_localctx._scriptletOrSeaWs = subCtx;
			    		        	}
			    		        }
			    		    }
			    		} 
			    	}
			    	this.State = 27;
			    	_errHandler.Sync(this);
			    	_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			    }
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 29;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==XML) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: MatchToken */
			    	    this.State = 28; 
			    	    Match(XML);
			    	}
			    }

			    /* STG: StarBlock */
			    this.State = 34;
			    _errHandler.Sync(this);
			    _alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			    while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
			    	if ( _alt==1 ) {
			    		{
			    		/* STG: CodeBlockForAlt */
			    			/* STG: locals */
			    			/* STG: preamble */
			    			/* STG: ops */
			    		    {
			    		    /* STG: CodeBlockForAlt */
			    		    	/* STG: locals */
			    		    	/* STG: preamble */
			    		    	/* STG: ops */
			    		        /* STG: InvokeRule */
			    		        {
			    		        	this.State = 31; 
			    		        	(var subCtx, _localError) = scriptletOrSeaWs();
			    		        	if (_localError is not null) {
			    		        		if (_localError is RecognitionException re) {
			    		        			_localctx.exception = re;
			    		        			_errHandler.ReportError(this, re);
			    		        			_errHandler.Recover(this, re);
			    		        			return (_localctx, _localError);
			    		        		} else {
			    		        			throw _localError;
			    		        		}
			    		            } else {
			    		        		_localctx._scriptletOrSeaWs = subCtx;
			    		        	}
			    		        }
			    		    }
			    		} 
			    	}
			    	this.State = 36;
			    	_errHandler.Sync(this);
			    	_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			    }
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 38;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==DTD) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: MatchToken */
			    	    this.State = 37; 
			    	    Match(DTD);
			    	}
			    }

			    /* STG: StarBlock */
			    this.State = 43;
			    _errHandler.Sync(this);
			    _alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			    while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
			    	if ( _alt==1 ) {
			    		{
			    		/* STG: CodeBlockForAlt */
			    			/* STG: locals */
			    			/* STG: preamble */
			    			/* STG: ops */
			    		    {
			    		    /* STG: CodeBlockForAlt */
			    		    	/* STG: locals */
			    		    	/* STG: preamble */
			    		    	/* STG: ops */
			    		        /* STG: InvokeRule */
			    		        {
			    		        	this.State = 40; 
			    		        	(var subCtx, _localError) = scriptletOrSeaWs();
			    		        	if (_localError is not null) {
			    		        		if (_localError is RecognitionException re) {
			    		        			_localctx.exception = re;
			    		        			_errHandler.ReportError(this, re);
			    		        			_errHandler.Recover(this, re);
			    		        			return (_localctx, _localError);
			    		        		} else {
			    		        			throw _localError;
			    		        		}
			    		            } else {
			    		        		_localctx._scriptletOrSeaWs = subCtx;
			    		        	}
			    		        }
			    		    }
			    		} 
			    	}
			    	this.State = 45;
			    	_errHandler.Sync(this);
			    	_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			    }
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 49;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HTML_COMMENT) | (1L << HTML_CONDITIONAL_COMMENT) | (1L << SCRIPTLET) | (1L << SEA_WS) | (1L << SCRIPT_OPEN) | (1L << STYLE_OPEN) | (1L << TAG_OPEN))) != 0)) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 46; 
			    	        	(var subCtx, _localError) = htmlElements();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._htmlElements = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 51;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ScriptletOrSeaWsContext : ParserRuleContext {
		public ITerminalNode SCRIPTLET() { return GetToken(HTMLParser.SCRIPTLET, 0); }
		public ITerminalNode SEA_WS() { return GetToken(HTMLParser.SEA_WS, 0); }
		public ScriptletOrSeaWsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptletOrSeaWs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterScriptletOrSeaWs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitScriptletOrSeaWs(this);
		}
	}

	[RuleVersion(0)]
	public (ScriptletOrSeaWsContext, Exception? error) scriptletOrSeaWs() {
		ScriptletOrSeaWsContext _localctx = new ScriptletOrSeaWsContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 2, RULE_scriptletOrSeaWs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: CommonSetStuff */
			    this.State = 52;
			    _la = _input.La(1);
			    if ( !(_la==SCRIPTLET || _la==SEA_WS) ) {
			    _errHandler.RecoverInline(this);
			    } else {
			    	if (_input.La(1) == TokenConstants.Eof) {
			    		matchedEOF = true;
			    	}

			    	_errHandler.ReportMatch(this);
			    	Consume();
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class HtmlElementsContext : ParserRuleContext {
		public HtmlMiscContext _htmlMisc;
		public HtmlElementContext _htmlElement;
		public HtmlElementContext htmlElement() {
			return GetRuleContext<HtmlElementContext>(0);
		}
		public HtmlMiscContext[] htmlMisc() {
			return GetRuleContexts<HtmlMiscContext>();
		}
		public HtmlMiscContext htmlMisc(int i) {
			return GetRuleContext<HtmlMiscContext>(i);
		}
		public HtmlElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlElements(this);
		}
	}

	[RuleVersion(0)]
	public (HtmlElementsContext, Exception? error) htmlElements() {
		HtmlElementsContext _localctx = new HtmlElementsContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 4, RULE_htmlElements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 57;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HTML_COMMENT) | (1L << HTML_CONDITIONAL_COMMENT) | (1L << SEA_WS))) != 0)) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 54; 
			    	        	(var subCtx, _localError) = htmlMisc();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._htmlMisc = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 59;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			    /* STG: InvokeRule */
			    {
			    	this.State = 60; 
			    	(var subCtx, _localError) = htmlElement();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._htmlElement = subCtx;
			    	}
			    }
			    /* STG: StarBlock */
			    this.State = 64;
			    _errHandler.Sync(this);
			    _alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			    while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
			    	if ( _alt==1 ) {
			    		{
			    		/* STG: CodeBlockForAlt */
			    			/* STG: locals */
			    			/* STG: preamble */
			    			/* STG: ops */
			    		    {
			    		    /* STG: CodeBlockForAlt */
			    		    	/* STG: locals */
			    		    	/* STG: preamble */
			    		    	/* STG: ops */
			    		        /* STG: InvokeRule */
			    		        {
			    		        	this.State = 61; 
			    		        	(var subCtx, _localError) = htmlMisc();
			    		        	if (_localError is not null) {
			    		        		if (_localError is RecognitionException re) {
			    		        			_localctx.exception = re;
			    		        			_errHandler.ReportError(this, re);
			    		        			_errHandler.Recover(this, re);
			    		        			return (_localctx, _localError);
			    		        		} else {
			    		        			throw _localError;
			    		        		}
			    		            } else {
			    		        		_localctx._htmlMisc = subCtx;
			    		        	}
			    		        }
			    		    }
			    		} 
			    	}
			    	this.State = 66;
			    	_errHandler.Sync(this);
			    	_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class HtmlElementContext : ParserRuleContext {
		public HtmlAttributeContext _htmlAttribute;
		public HtmlContentContext _htmlContent;
		public ScriptContext _script;
		public StyleContext _style;
		public ITerminalNode[] TAG_OPEN() { return GetTokens(HTMLParser.TAG_OPEN); }
		public ITerminalNode TAG_OPEN(int i) {
			return GetToken(HTMLParser.TAG_OPEN, i);
		}
		public ITerminalNode[] TAG_NAME() { return GetTokens(HTMLParser.TAG_NAME); }
		public ITerminalNode TAG_NAME(int i) {
			return GetToken(HTMLParser.TAG_NAME, i);
		}
		public ITerminalNode[] TAG_CLOSE() { return GetTokens(HTMLParser.TAG_CLOSE); }
		public ITerminalNode TAG_CLOSE(int i) {
			return GetToken(HTMLParser.TAG_CLOSE, i);
		}
		public ITerminalNode TAG_SLASH_CLOSE() { return GetToken(HTMLParser.TAG_SLASH_CLOSE, 0); }
		public HtmlAttributeContext[] htmlAttribute() {
			return GetRuleContexts<HtmlAttributeContext>();
		}
		public HtmlAttributeContext htmlAttribute(int i) {
			return GetRuleContext<HtmlAttributeContext>(i);
		}
		public HtmlContentContext htmlContent() {
			return GetRuleContext<HtmlContentContext>(0);
		}
		public ITerminalNode TAG_SLASH() { return GetToken(HTMLParser.TAG_SLASH, 0); }
		public ITerminalNode SCRIPTLET() { return GetToken(HTMLParser.SCRIPTLET, 0); }
		public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		public StyleContext style() {
			return GetRuleContext<StyleContext>(0);
		}
		public HtmlElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlElement(this);
		}
	}

	[RuleVersion(0)]
	public (HtmlElementContext, Exception? error) htmlElement() {
		HtmlElementContext _localctx = new HtmlElementContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 6, RULE_htmlElement);
		int _la;
		try {
			/* STG: LL1AltBlock */
			this.State = 90;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TAG_OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 67; 
				    Match(TAG_OPEN);
				    /* STG: MatchToken */
				    this.State = 68; 
				    Match(TAG_NAME);
				    /* STG: LL1StarBlockSingleAlt */
				    this.State = 72;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    while (_la==TAG_NAME) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    {
				    	    /* STG: CodeBlockForAlt */
				    	    	/* STG: locals */
				    	    	/* STG: preamble */
				    	    	/* STG: ops */
				    	        /* STG: InvokeRule */
				    	        {
				    	        	this.State = 69; 
				    	        	(var subCtx, _localError) = htmlAttribute();
				    	        	if (_localError is not null) {
				    	        		if (_localError is RecognitionException re) {
				    	        			_localctx.exception = re;
				    	        			_errHandler.ReportError(this, re);
				    	        			_errHandler.Recover(this, re);
				    	        			return (_localctx, _localError);
				    	        		} else {
				    	        			throw _localError;
				    	        		}
				    	            } else {
				    	        		_localctx._htmlAttribute = subCtx;
				    	        	}
				    	        }
				    	    }
				    	}
				    	this.State = 74;
				    	_errHandler.Sync(this);
				    	_la = _input.La(1);
				    }
				    /* STG: LL1AltBlock */
				    this.State = 85;
				    _errHandler.Sync(this);
				    switch (_input.La(1)) {
				    case TAG_CLOSE:
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: MatchToken */
				    	    this.State = 75; 
				    	    Match(TAG_CLOSE);
				    	    /* STG: OptionalBlock */
				    	    this.State = 82;
				    	    _errHandler.Sync(this);
				    	    switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
				    	    case 1:
				    	    	{
				    	    	/* STG: CodeBlockForAlt */
				    	    		/* STG: locals */
				    	    		/* STG: preamble */
				    	    		/* STG: ops */
				    	    	    /* STG: InvokeRule */
				    	    	    {
				    	    	    	this.State = 76; 
				    	    	    	(var subCtx, _localError) = htmlContent();
				    	    	    	if (_localError is not null) {
				    	    	    		if (_localError is RecognitionException re) {
				    	    	    			_localctx.exception = re;
				    	    	    			_errHandler.ReportError(this, re);
				    	    	    			_errHandler.Recover(this, re);
				    	    	    			return (_localctx, _localError);
				    	    	    		} else {
				    	    	    			throw _localError;
				    	    	    		}
				    	    	        } else {
				    	    	    		_localctx._htmlContent = subCtx;
				    	    	    	}
				    	    	    }
				    	    	    /* STG: MatchToken */
				    	    	    this.State = 77; 
				    	    	    Match(TAG_OPEN);
				    	    	    /* STG: MatchToken */
				    	    	    this.State = 78; 
				    	    	    Match(TAG_SLASH);
				    	    	    /* STG: MatchToken */
				    	    	    this.State = 79; 
				    	    	    Match(TAG_NAME);
				    	    	    /* STG: MatchToken */
				    	    	    this.State = 80; 
				    	    	    Match(TAG_CLOSE);
				    	    	}
				    	    	break;
				    	    }
				    	}
				    	break;
				    case TAG_SLASH_CLOSE:
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: MatchToken */
				    	    this.State = 84; 
				    	    Match(TAG_SLASH_CLOSE);
				    	}
				    	break;
				    default:
				    	{
				    		/* STG: ThrowNoViableAlt */
				    		// throw new NoViableAltException(this);

				    		var re = new NoViableAltException(this);
				    		_localctx.exception = re;
				    		_errHandler.ReportError(this, re);
				    		_errHandler.Recover(this, re);

				    		// ExitRule();
				    		return (_localctx, re);
				    	}
				    }
				}
				break;
			case SCRIPTLET:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 87; 
				    Match(SCRIPTLET);
				}
				break;
			case SCRIPT_OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 88; 
				    	(var subCtx, _localError) = script();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._script = subCtx;
				    	}
				    }
				}
				break;
			case STYLE_OPEN:
				EnterOuterAlt(_localctx, 4);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 89; 
				    	(var subCtx, _localError) = style();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._style = subCtx;
				    	}
				    }
				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class HtmlContentContext : ParserRuleContext {
		public HtmlChardataContext _htmlChardata;
		public HtmlElementContext _htmlElement;
		public HtmlCommentContext _htmlComment;
		public HtmlChardataContext[] htmlChardata() {
			return GetRuleContexts<HtmlChardataContext>();
		}
		public HtmlChardataContext htmlChardata(int i) {
			return GetRuleContext<HtmlChardataContext>(i);
		}
		public HtmlElementContext[] htmlElement() {
			return GetRuleContexts<HtmlElementContext>();
		}
		public HtmlElementContext htmlElement(int i) {
			return GetRuleContext<HtmlElementContext>(i);
		}
		public ITerminalNode[] CDATA() { return GetTokens(HTMLParser.CDATA); }
		public ITerminalNode CDATA(int i) {
			return GetToken(HTMLParser.CDATA, i);
		}
		public HtmlCommentContext[] htmlComment() {
			return GetRuleContexts<HtmlCommentContext>();
		}
		public HtmlCommentContext htmlComment(int i) {
			return GetRuleContext<HtmlCommentContext>(i);
		}
		public HtmlContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlContent(this);
		}
	}

	[RuleVersion(0)]
	public (HtmlContentContext, Exception? error) htmlContent() {
		HtmlContentContext _localctx = new HtmlContentContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 8, RULE_htmlContent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 93;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==SEA_WS || _la==HTML_TEXT) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 92; 
			    	    	(var subCtx, _localError) = htmlChardata();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._htmlChardata = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			    /* STG: StarBlock */
			    this.State = 105;
			    _errHandler.Sync(this);
			    _alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			    while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
			    	if ( _alt==1 ) {
			    		{
			    		/* STG: CodeBlockForAlt */
			    			/* STG: locals */
			    			/* STG: preamble */
			    			/* STG: ops */
			    		    {
			    		    /* STG: CodeBlockForAlt */
			    		    	/* STG: locals */
			    		    	/* STG: preamble */
			    		    	/* STG: ops */
			    		        /* STG: LL1AltBlock */
			    		        this.State = 98;
			    		        _errHandler.Sync(this);
			    		        switch (_input.La(1)) {
			    		        case SCRIPTLET:
			    		        case SCRIPT_OPEN:
			    		        case STYLE_OPEN:
			    		        case TAG_OPEN:
			    		        	{
			    		        	/* STG: CodeBlockForAlt */
			    		        		/* STG: locals */
			    		        		/* STG: preamble */
			    		        		/* STG: ops */
			    		        	    /* STG: InvokeRule */
			    		        	    {
			    		        	    	this.State = 95; 
			    		        	    	(var subCtx, _localError) = htmlElement();
			    		        	    	if (_localError is not null) {
			    		        	    		if (_localError is RecognitionException re) {
			    		        	    			_localctx.exception = re;
			    		        	    			_errHandler.ReportError(this, re);
			    		        	    			_errHandler.Recover(this, re);
			    		        	    			return (_localctx, _localError);
			    		        	    		} else {
			    		        	    			throw _localError;
			    		        	    		}
			    		        	        } else {
			    		        	    		_localctx._htmlElement = subCtx;
			    		        	    	}
			    		        	    }
			    		        	}
			    		        	break;
			    		        case CDATA:
			    		        	{
			    		        	/* STG: CodeBlockForAlt */
			    		        		/* STG: locals */
			    		        		/* STG: preamble */
			    		        		/* STG: ops */
			    		        	    /* STG: MatchToken */
			    		        	    this.State = 96; 
			    		        	    Match(CDATA);
			    		        	}
			    		        	break;
			    		        case HTML_COMMENT:
			    		        case HTML_CONDITIONAL_COMMENT:
			    		        	{
			    		        	/* STG: CodeBlockForAlt */
			    		        		/* STG: locals */
			    		        		/* STG: preamble */
			    		        		/* STG: ops */
			    		        	    /* STG: InvokeRule */
			    		        	    {
			    		        	    	this.State = 97; 
			    		        	    	(var subCtx, _localError) = htmlComment();
			    		        	    	if (_localError is not null) {
			    		        	    		if (_localError is RecognitionException re) {
			    		        	    			_localctx.exception = re;
			    		        	    			_errHandler.ReportError(this, re);
			    		        	    			_errHandler.Recover(this, re);
			    		        	    			return (_localctx, _localError);
			    		        	    		} else {
			    		        	    			throw _localError;
			    		        	    		}
			    		        	        } else {
			    		        	    		_localctx._htmlComment = subCtx;
			    		        	    	}
			    		        	    }
			    		        	}
			    		        	break;
			    		        default:
			    		        	{
			    		        		/* STG: ThrowNoViableAlt */
			    		        		// throw new NoViableAltException(this);

			    		        		var re = new NoViableAltException(this);
			    		        		_localctx.exception = re;
			    		        		_errHandler.ReportError(this, re);
			    		        		_errHandler.Recover(this, re);

			    		        		// ExitRule();
			    		        		return (_localctx, re);
			    		        	}
			    		        }
			    		        /* STG: LL1OptionalBlockSingleAlt */
			    		        this.State = 101;
			    		        _errHandler.Sync(this);
			    		        _la = _input.La(1);
			    		        if (_la==SEA_WS || _la==HTML_TEXT) {
			    		        	{
			    		        	/* STG: CodeBlockForAlt */
			    		        		/* STG: locals */
			    		        		/* STG: preamble */
			    		        		/* STG: ops */
			    		        	    /* STG: InvokeRule */
			    		        	    {
			    		        	    	this.State = 100; 
			    		        	    	(var subCtx, _localError) = htmlChardata();
			    		        	    	if (_localError is not null) {
			    		        	    		if (_localError is RecognitionException re) {
			    		        	    			_localctx.exception = re;
			    		        	    			_errHandler.ReportError(this, re);
			    		        	    			_errHandler.Recover(this, re);
			    		        	    			return (_localctx, _localError);
			    		        	    		} else {
			    		        	    			throw _localError;
			    		        	    		}
			    		        	        } else {
			    		        	    		_localctx._htmlChardata = subCtx;
			    		        	    	}
			    		        	    }
			    		        	}
			    		        }

			    		    }
			    		} 
			    	}
			    	this.State = 107;
			    	_errHandler.Sync(this);
			    	_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class HtmlAttributeContext : ParserRuleContext {
		public ITerminalNode TAG_NAME() { return GetToken(HTMLParser.TAG_NAME, 0); }
		public ITerminalNode TAG_EQUALS() { return GetToken(HTMLParser.TAG_EQUALS, 0); }
		public ITerminalNode ATTVALUE_VALUE() { return GetToken(HTMLParser.ATTVALUE_VALUE, 0); }
		public HtmlAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttribute(this);
		}
	}

	[RuleVersion(0)]
	public (HtmlAttributeContext, Exception? error) htmlAttribute() {
		HtmlAttributeContext _localctx = new HtmlAttributeContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 10, RULE_htmlAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 108; 
			    Match(TAG_NAME);
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 111;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==TAG_EQUALS) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: MatchToken */
			    	    this.State = 109; 
			    	    Match(TAG_EQUALS);
			    	    /* STG: MatchToken */
			    	    this.State = 110; 
			    	    Match(ATTVALUE_VALUE);
			    	}
			    }

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class HtmlChardataContext : ParserRuleContext {
		public ITerminalNode HTML_TEXT() { return GetToken(HTMLParser.HTML_TEXT, 0); }
		public ITerminalNode SEA_WS() { return GetToken(HTMLParser.SEA_WS, 0); }
		public HtmlChardataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlChardata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlChardata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlChardata(this);
		}
	}

	[RuleVersion(0)]
	public (HtmlChardataContext, Exception? error) htmlChardata() {
		HtmlChardataContext _localctx = new HtmlChardataContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 12, RULE_htmlChardata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: CommonSetStuff */
			    this.State = 113;
			    _la = _input.La(1);
			    if ( !(_la==SEA_WS || _la==HTML_TEXT) ) {
			    _errHandler.RecoverInline(this);
			    } else {
			    	if (_input.La(1) == TokenConstants.Eof) {
			    		matchedEOF = true;
			    	}

			    	_errHandler.ReportMatch(this);
			    	Consume();
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class HtmlMiscContext : ParserRuleContext {
		public HtmlCommentContext _htmlComment;
		public HtmlCommentContext htmlComment() {
			return GetRuleContext<HtmlCommentContext>(0);
		}
		public ITerminalNode SEA_WS() { return GetToken(HTMLParser.SEA_WS, 0); }
		public HtmlMiscContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlMisc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlMisc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlMisc(this);
		}
	}

	[RuleVersion(0)]
	public (HtmlMiscContext, Exception? error) htmlMisc() {
		HtmlMiscContext _localctx = new HtmlMiscContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 14, RULE_htmlMisc);
		try {
			/* STG: LL1AltBlock */
			this.State = 117;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case HTML_COMMENT:
			case HTML_CONDITIONAL_COMMENT:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 115; 
				    	(var subCtx, _localError) = htmlComment();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._htmlComment = subCtx;
				    	}
				    }
				}
				break;
			case SEA_WS:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 116; 
				    Match(SEA_WS);
				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class HtmlCommentContext : ParserRuleContext {
		public ITerminalNode HTML_COMMENT() { return GetToken(HTMLParser.HTML_COMMENT, 0); }
		public ITerminalNode HTML_CONDITIONAL_COMMENT() { return GetToken(HTMLParser.HTML_CONDITIONAL_COMMENT, 0); }
		public HtmlCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlComment(this);
		}
	}

	[RuleVersion(0)]
	public (HtmlCommentContext, Exception? error) htmlComment() {
		HtmlCommentContext _localctx = new HtmlCommentContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 16, RULE_htmlComment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: CommonSetStuff */
			    this.State = 119;
			    _la = _input.La(1);
			    if ( !(_la==HTML_COMMENT || _la==HTML_CONDITIONAL_COMMENT) ) {
			    _errHandler.RecoverInline(this);
			    } else {
			    	if (_input.La(1) == TokenConstants.Eof) {
			    		matchedEOF = true;
			    	}

			    	_errHandler.ReportMatch(this);
			    	Consume();
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ScriptContext : ParserRuleContext {
		public ITerminalNode SCRIPT_OPEN() { return GetToken(HTMLParser.SCRIPT_OPEN, 0); }
		public ITerminalNode SCRIPT_BODY() { return GetToken(HTMLParser.SCRIPT_BODY, 0); }
		public ITerminalNode SCRIPT_SHORT_BODY() { return GetToken(HTMLParser.SCRIPT_SHORT_BODY, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public (ScriptContext, Exception? error) script() {
		ScriptContext _localctx = new ScriptContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 18, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 121; 
			    Match(SCRIPT_OPEN);
			    /* STG: CommonSetStuff */
			    this.State = 122;
			    _la = _input.La(1);
			    if ( !(_la==SCRIPT_BODY || _la==SCRIPT_SHORT_BODY) ) {
			    _errHandler.RecoverInline(this);
			    } else {
			    	if (_input.La(1) == TokenConstants.Eof) {
			    		matchedEOF = true;
			    	}

			    	_errHandler.ReportMatch(this);
			    	Consume();
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class StyleContext : ParserRuleContext {
		public ITerminalNode STYLE_OPEN() { return GetToken(HTMLParser.STYLE_OPEN, 0); }
		public ITerminalNode STYLE_BODY() { return GetToken(HTMLParser.STYLE_BODY, 0); }
		public ITerminalNode STYLE_SHORT_BODY() { return GetToken(HTMLParser.STYLE_SHORT_BODY, 0); }
		public StyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_style; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterStyle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitStyle(this);
		}
	}

	[RuleVersion(0)]
	public (StyleContext, Exception? error) style() {
		StyleContext _localctx = new StyleContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 20, RULE_style);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 124; 
			    Match(STYLE_OPEN);
			    /* STG: CommonSetStuff */
			    this.State = 125;
			    _la = _input.La(1);
			    if ( !(_la==STYLE_BODY || _la==STYLE_SHORT_BODY) ) {
			    _errHandler.RecoverInline(this);
			    } else {
			    	if (_input.La(1) == TokenConstants.Eof) {
			    		matchedEOF = true;
			    	}

			    	_errHandler.ReportMatch(this);
			    	Consume();
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x19\x82\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\a\x2\x1A\n\x2\f\x2\xE\x2\x1D\v\x2"+
		"\x3\x2\x5\x2 \n\x2\x3\x2\a\x2#\n\x2\f\x2\xE\x2&\v\x2\x3\x2\x5\x2)\n\x2"+
		"\x3\x2\a\x2,\n\x2\f\x2\xE\x2/\v\x2\x3\x2\a\x2\x32\n\x2\f\x2\xE\x2\x35"+
		"\v\x2\x3\x3\x3\x3\x3\x4\a\x4:\n\x4\f\x4\xE\x4=\v\x4\x3\x4\x3\x4\a\x4\x41"+
		"\n\x4\f\x4\xE\x4\x44\v\x4\x3\x5\x3\x5\x3\x5\a\x5I\n\x5\f\x5\xE\x5L\v\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5U\n\x5\x3\x5\x5\x5X\n"+
		"\x5\x3\x5\x3\x5\x3\x5\x5\x5]\n\x5\x3\x6\x5\x6`\n\x6\x3\x6\x3\x6\x3\x6"+
		"\x5\x6\x65\n\x6\x3\x6\x5\x6h\n\x6\a\x6j\n\x6\f\x6\xE\x6m\v\x6\x3\a\x3"+
		"\a\x3\a\x5\ar\n\a\x3\b\x3\b\x3\t\x3\t\x5\tx\n\t\x3\n\x3\n\x3\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\f\x3\f\x2\x2\x2\r\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE"+
		"\x2\x10\x2\x12\x2\x14\x2\x16\x2\x2\a\x3\x2\b\t\x4\x2\t\t\r\r\x3\x2\x3"+
		"\x4\x3\x2\x14\x15\x3\x2\x16\x17\x8B\x2\x1B\x3\x2\x2\x2\x4\x36\x3\x2\x2"+
		"\x2\x6;\x3\x2\x2\x2\b\\\x3\x2\x2\x2\n_\x3\x2\x2\x2\fn\x3\x2\x2\x2\xEs"+
		"\x3\x2\x2\x2\x10w\x3\x2\x2\x2\x12y\x3\x2\x2\x2\x14{\x3\x2\x2\x2\x16~\x3"+
		"\x2\x2\x2\x18\x1A\x5\x4\x3\x2\x19\x18\x3\x2\x2\x2\x1A\x1D\x3\x2\x2\x2"+
		"\x1B\x19\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1F\x3\x2\x2\x2\x1D\x1B\x3"+
		"\x2\x2\x2\x1E \a\x5\x2\x2\x1F\x1E\x3\x2\x2\x2\x1F \x3\x2\x2\x2 $\x3\x2"+
		"\x2\x2!#\x5\x4\x3\x2\"!\x3\x2\x2\x2#&\x3\x2\x2\x2$\"\x3\x2\x2\x2$%\x3"+
		"\x2\x2\x2%(\x3\x2\x2\x2&$\x3\x2\x2\x2\')\a\a\x2\x2(\'\x3\x2\x2\x2()\x3"+
		"\x2\x2\x2)-\x3\x2\x2\x2*,\x5\x4\x3\x2+*\x3\x2\x2\x2,/\x3\x2\x2\x2-+\x3"+
		"\x2\x2\x2-.\x3\x2\x2\x2.\x33\x3\x2\x2\x2/-\x3\x2\x2\x2\x30\x32\x5\x6\x4"+
		"\x2\x31\x30\x3\x2\x2\x2\x32\x35\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x33\x34"+
		"\x3\x2\x2\x2\x34\x3\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2\x36\x37\t\x2\x2\x2"+
		"\x37\x5\x3\x2\x2\x2\x38:\x5\x10\t\x2\x39\x38\x3\x2\x2\x2:=\x3\x2\x2\x2"+
		";\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<>\x3\x2\x2\x2=;\x3\x2\x2\x2>\x42\x5\b"+
		"\x5\x2?\x41\x5\x10\t\x2@?\x3\x2\x2\x2\x41\x44\x3\x2\x2\x2\x42@\x3\x2\x2"+
		"\x2\x42\x43\x3\x2\x2\x2\x43\a\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x45\x46"+
		"\a\f\x2\x2\x46J\a\x12\x2\x2GI\x5\f\a\x2HG\x3\x2\x2\x2IL\x3\x2\x2\x2JH"+
		"\x3\x2\x2\x2JK\x3\x2\x2\x2KW\x3\x2\x2\x2LJ\x3\x2\x2\x2MT\a\xE\x2\x2NO"+
		"\x5\n\x6\x2OP\a\f\x2\x2PQ\a\x10\x2\x2QR\a\x12\x2\x2RS\a\xE\x2\x2SU\x3"+
		"\x2\x2\x2TN\x3\x2\x2\x2TU\x3\x2\x2\x2UX\x3\x2\x2\x2VX\a\xF\x2\x2WM\x3"+
		"\x2\x2\x2WV\x3\x2\x2\x2X]\x3\x2\x2\x2Y]\a\b\x2\x2Z]\x5\x14\v\x2[]\x5\x16"+
		"\f\x2\\\x45\x3\x2\x2\x2\\Y\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\[\x3\x2\x2\x2]"+
		"\t\x3\x2\x2\x2^`\x5\xE\b\x2_^\x3\x2\x2\x2_`\x3\x2\x2\x2`k\x3\x2\x2\x2"+
		"\x61\x65\x5\b\x5\x2\x62\x65\a\x6\x2\x2\x63\x65\x5\x12\n\x2\x64\x61\x3"+
		"\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x63\x3\x2\x2\x2\x65g\x3\x2\x2\x2\x66"+
		"h\x5\xE\b\x2g\x66\x3\x2\x2\x2gh\x3\x2\x2\x2hj\x3\x2\x2\x2i\x64\x3\x2\x2"+
		"\x2jm\x3\x2\x2\x2ki\x3\x2\x2\x2kl\x3\x2\x2\x2l\v\x3\x2\x2\x2mk\x3\x2\x2"+
		"\x2nq\a\x12\x2\x2op\a\x11\x2\x2pr\a\x18\x2\x2qo\x3\x2\x2\x2qr\x3\x2\x2"+
		"\x2r\r\x3\x2\x2\x2st\t\x3\x2\x2t\xF\x3\x2\x2\x2ux\x5\x12\n\x2vx\a\t\x2"+
		"\x2wu\x3\x2\x2\x2wv\x3\x2\x2\x2x\x11\x3\x2\x2\x2yz\t\x4\x2\x2z\x13\x3"+
		"\x2\x2\x2{|\a\n\x2\x2|}\t\x5\x2\x2}\x15\x3\x2\x2\x2~\x7F\a\v\x2\x2\x7F"+
		"\x80\t\x6\x2\x2\x80\x17\x3\x2\x2\x2\x14\x1B\x1F$(-\x33;\x42JTW\\_\x64"+
		"gkqw";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TestHtml
