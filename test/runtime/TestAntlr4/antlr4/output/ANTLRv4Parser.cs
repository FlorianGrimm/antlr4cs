//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.7-dev+80f9709733f917490172ebc58358fe21c7caa737
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\github.com\FlorianGrimm\antlr4cs\test\runtime\TestAntlr4\antlr4\ANTLRv4Parser.g4 by ANTLR 4.6.7-dev+80f9709733f917490172ebc58358fe21c7caa737

#pragma warning disable CS8669 // The annotation for nullable reference types should 

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TestAntlr4 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.7-dev+80f9709733f917490172ebc58358fe21c7caa737")]
public partial class ANTLRv4Parser : Parser {
	public const int
		TOKEN_REF=1, RULE_REF=2, LEXER_CHAR_SET=3, DOC_COMMENT=4, BLOCK_COMMENT=5, 
		LINE_COMMENT=6, INT=7, STRING_LITERAL=8, UNTERMINATED_STRING_LITERAL=9, 
		BEGIN_ARGUMENT=10, BEGIN_ACTION=11, OPTIONS=12, TOKENS=13, CHANNELS=14, 
		IMPORT=15, FRAGMENT=16, LEXER=17, PARSER=18, GRAMMAR=19, PROTECTED=20, 
		PUBLIC=21, PRIVATE=22, RETURNS=23, LOCALS=24, THROWS=25, CATCH=26, FINALLY=27, 
		MODE=28, COLON=29, COLONCOLON=30, COMMA=31, SEMI=32, LPAREN=33, RPAREN=34, 
		LBRACE=35, RBRACE=36, RARROW=37, LT=38, GT=39, ASSIGN=40, QUESTION=41, 
		STAR=42, PLUS_ASSIGN=43, PLUS=44, OR=45, DOLLAR=46, RANGE=47, DOT=48, 
		AT=49, POUND=50, NOT=51, ID=52, WS=53, ERRCHAR=54, END_ARGUMENT=55, UNTERMINATED_ARGUMENT=56, 
		ARGUMENT_CONTENT=57, END_ACTION=58, UNTERMINATED_ACTION=59, ACTION_CONTENT=60, 
		UNTERMINATED_CHAR_SET=61;
	public const int
		RULE_grammarSpec = 0, RULE_grammarDecl = 1, RULE_grammarType = 2, RULE_prequelConstruct = 3, 
		RULE_optionsSpec = 4, RULE_option = 5, RULE_optionValue = 6, RULE_delegateGrammars = 7, 
		RULE_delegateGrammar = 8, RULE_tokensSpec = 9, RULE_channelsSpec = 10, 
		RULE_idList = 11, RULE_action_ = 12, RULE_actionScopeName = 13, RULE_actionBlock = 14, 
		RULE_argActionBlock = 15, RULE_modeSpec = 16, RULE_rules = 17, RULE_ruleSpec = 18, 
		RULE_parserRuleSpec = 19, RULE_exceptionGroup = 20, RULE_exceptionHandler = 21, 
		RULE_finallyClause = 22, RULE_rulePrequel = 23, RULE_ruleReturns = 24, 
		RULE_throwsSpec = 25, RULE_localsSpec = 26, RULE_ruleAction = 27, RULE_ruleModifiers = 28, 
		RULE_ruleModifier = 29, RULE_ruleBlock = 30, RULE_ruleAltList = 31, RULE_labeledAlt = 32, 
		RULE_lexerRuleSpec = 33, RULE_lexerRuleBlock = 34, RULE_lexerAltList = 35, 
		RULE_lexerAlt = 36, RULE_lexerElements = 37, RULE_lexerElement = 38, RULE_lexerBlock = 39, 
		RULE_lexerCommands = 40, RULE_lexerCommand = 41, RULE_lexerCommandName = 42, 
		RULE_lexerCommandExpr = 43, RULE_altList = 44, RULE_alternative = 45, 
		RULE_element = 46, RULE_predicateOptions = 47, RULE_predicateOption = 48, 
		RULE_labeledElement = 49, RULE_ebnf = 50, RULE_blockSuffix = 51, RULE_ebnfSuffix = 52, 
		RULE_lexerAtom = 53, RULE_atom = 54, RULE_notSet = 55, RULE_blockSet = 56, 
		RULE_setElement = 57, RULE_block = 58, RULE_ruleref = 59, RULE_characterRange = 60, 
		RULE_terminalDef = 61, RULE_elementOptions = 62, RULE_elementOption = 63, 
		RULE_identifier = 64;
	public static readonly string[] ruleNames = {
		"grammarSpec", "grammarDecl", "grammarType", "prequelConstruct", "optionsSpec", 
		"option", "optionValue", "delegateGrammars", "delegateGrammar", "tokensSpec", 
		"channelsSpec", "idList", "action_", "actionScopeName", "actionBlock", 
		"argActionBlock", "modeSpec", "rules", "ruleSpec", "parserRuleSpec", "exceptionGroup", 
		"exceptionHandler", "finallyClause", "rulePrequel", "ruleReturns", "throwsSpec", 
		"localsSpec", "ruleAction", "ruleModifiers", "ruleModifier", "ruleBlock", 
		"ruleAltList", "labeledAlt", "lexerRuleSpec", "lexerRuleBlock", "lexerAltList", 
		"lexerAlt", "lexerElements", "lexerElement", "lexerBlock", "lexerCommands", 
		"lexerCommand", "lexerCommandName", "lexerCommandExpr", "altList", "alternative", 
		"element", "predicateOptions", "predicateOption", "labeledElement", "ebnf", 
		"blockSuffix", "ebnfSuffix", "lexerAtom", "atom", "notSet", "blockSet", 
		"setElement", "block", "ruleref", "characterRange", "terminalDef", "elementOptions", 
		"elementOption", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "'import'", "'fragment'", "'lexer'", "'parser'", "'grammar'", 
		"'protected'", "'public'", "'private'", "'returns'", "'locals'", "'throws'", 
		"'catch'", "'finally'", "'mode'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "DOC_COMMENT", "BLOCK_COMMENT", 
		"LINE_COMMENT", "INT", "STRING_LITERAL", "UNTERMINATED_STRING_LITERAL", 
		"BEGIN_ARGUMENT", "BEGIN_ACTION", "OPTIONS", "TOKENS", "CHANNELS", "IMPORT", 
		"FRAGMENT", "LEXER", "PARSER", "GRAMMAR", "PROTECTED", "PUBLIC", "PRIVATE", 
		"RETURNS", "LOCALS", "THROWS", "CATCH", "FINALLY", "MODE", "COLON", "COLONCOLON", 
		"COMMA", "SEMI", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "RARROW", "LT", 
		"GT", "ASSIGN", "QUESTION", "STAR", "PLUS_ASSIGN", "PLUS", "OR", "DOLLAR", 
		"RANGE", "DOT", "AT", "POUND", "NOT", "ID", "WS", "ERRCHAR", "END_ARGUMENT", 
		"UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", "END_ACTION", "UNTERMINATED_ACTION", 
		"ACTION_CONTENT", "UNTERMINATED_CHAR_SET"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ANTLRv4Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ANTLRv4Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class GrammarSpecContext : ParserRuleContext {
		public GrammarDeclContext _grammarDecl;
		public PrequelConstructContext _prequelConstruct;
		public RulesContext _rules;
		public ModeSpecContext _modeSpec;
		public GrammarDeclContext grammarDecl() {
			return GetRuleContext<GrammarDeclContext>(0);
		}
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ANTLRv4Parser.Eof, 0); }
		public PrequelConstructContext[] prequelConstruct() {
			return GetRuleContexts<PrequelConstructContext>();
		}
		public PrequelConstructContext prequelConstruct(int i) {
			return GetRuleContext<PrequelConstructContext>(i);
		}
		public ModeSpecContext[] modeSpec() {
			return GetRuleContexts<ModeSpecContext>();
		}
		public ModeSpecContext modeSpec(int i) {
			return GetRuleContext<ModeSpecContext>(i);
		}
		public GrammarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarSpec(this);
		}
	}

	[RuleVersion(0)]
	public (GrammarSpecContext, Exception? error) grammarSpec() {
		GrammarSpecContext _localctx = new GrammarSpecContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 0, RULE_grammarSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 130; 
			    	(var subCtx, _localError) = grammarDecl();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._grammarDecl = subCtx;
			    	}
			    }
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 134;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << TOKENS) | (1L << CHANNELS) | (1L << IMPORT) | (1L << AT))) != 0)) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 131; 
			    	        	(var subCtx, _localError) = prequelConstruct();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._prequelConstruct = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 136;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			    /* STG: InvokeRule */
			    {
			    	this.State = 137; 
			    	(var subCtx, _localError) = rules();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._rules = subCtx;
			    	}
			    }
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 141;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==MODE) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 138; 
			    	        	(var subCtx, _localError) = modeSpec();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._modeSpec = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 143;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			    /* STG: MatchToken */
			    this.State = 144; 
			    Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class GrammarDeclContext : ParserRuleContext {
		public GrammarTypeContext _grammarType;
		public IdentifierContext _identifier;
		public GrammarTypeContext grammarType() {
			return GetRuleContext<GrammarTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public GrammarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarDecl(this);
		}
	}

	[RuleVersion(0)]
	public (GrammarDeclContext, Exception? error) grammarDecl() {
		GrammarDeclContext _localctx = new GrammarDeclContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 2, RULE_grammarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 146; 
			    	(var subCtx, _localError) = grammarType();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._grammarType = subCtx;
			    	}
			    }
			    /* STG: InvokeRule */
			    {
			    	this.State = 147; 
			    	(var subCtx, _localError) = identifier();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._identifier = subCtx;
			    	}
			    }
			    /* STG: MatchToken */
			    this.State = 148; 
			    Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class GrammarTypeContext : ParserRuleContext {
		public ITerminalNode LEXER() { return GetToken(ANTLRv4Parser.LEXER, 0); }
		public ITerminalNode GRAMMAR() { return GetToken(ANTLRv4Parser.GRAMMAR, 0); }
		public ITerminalNode PARSER() { return GetToken(ANTLRv4Parser.PARSER, 0); }
		public GrammarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarType(this);
		}
	}

	[RuleVersion(0)]
	public (GrammarTypeContext, Exception? error) grammarType() {
		GrammarTypeContext _localctx = new GrammarTypeContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 4, RULE_grammarType);
		try {
			/* STG: LL1AltBlock */
			this.State = 155;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LEXER:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 150; 
				    Match(LEXER);
				    /* STG: MatchToken */
				    this.State = 151; 
				    Match(GRAMMAR);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 152; 
				    Match(PARSER);
				    /* STG: MatchToken */
				    this.State = 153; 
				    Match(GRAMMAR);
				}
				break;
			case GRAMMAR:
				EnterOuterAlt(_localctx, 3);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 154; 
				    Match(GRAMMAR);
				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class PrequelConstructContext : ParserRuleContext {
		public OptionsSpecContext _optionsSpec;
		public DelegateGrammarsContext _delegateGrammars;
		public TokensSpecContext _tokensSpec;
		public ChannelsSpecContext _channelsSpec;
		public Action_Context _action_;
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public DelegateGrammarsContext delegateGrammars() {
			return GetRuleContext<DelegateGrammarsContext>(0);
		}
		public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		public ChannelsSpecContext channelsSpec() {
			return GetRuleContext<ChannelsSpecContext>(0);
		}
		public Action_Context action_() {
			return GetRuleContext<Action_Context>(0);
		}
		public PrequelConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prequelConstruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterPrequelConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitPrequelConstruct(this);
		}
	}

	[RuleVersion(0)]
	public (PrequelConstructContext, Exception? error) prequelConstruct() {
		PrequelConstructContext _localctx = new PrequelConstructContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 6, RULE_prequelConstruct);
		try {
			/* STG: LL1AltBlock */
			this.State = 162;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 157; 
				    	(var subCtx, _localError) = optionsSpec();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._optionsSpec = subCtx;
				    	}
				    }
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 158; 
				    	(var subCtx, _localError) = delegateGrammars();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._delegateGrammars = subCtx;
				    	}
				    }
				}
				break;
			case TOKENS:
				EnterOuterAlt(_localctx, 3);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 159; 
				    	(var subCtx, _localError) = tokensSpec();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._tokensSpec = subCtx;
				    	}
				    }
				}
				break;
			case CHANNELS:
				EnterOuterAlt(_localctx, 4);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 160; 
				    	(var subCtx, _localError) = channelsSpec();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._channelsSpec = subCtx;
				    	}
				    }
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 161; 
				    	(var subCtx, _localError) = action_();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._action_ = subCtx;
				    	}
				    }
				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class OptionsSpecContext : ParserRuleContext {
		public OptionContext _option;
		public ITerminalNode OPTIONS() { return GetToken(ANTLRv4Parser.OPTIONS, 0); }
		public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(ANTLRv4Parser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(ANTLRv4Parser.SEMI, i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public (OptionsSpecContext, Exception? error) optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 8, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 164; 
			    Match(OPTIONS);
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 170;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==TOKEN_REF || _la==RULE_REF) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 165; 
			    	        	(var subCtx, _localError) = option();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._option = subCtx;
			    	        	}
			    	        }
			    	        /* STG: MatchToken */
			    	        this.State = 166; 
			    	        Match(SEMI);
			    	    }
			    	}
			    	this.State = 172;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			    /* STG: MatchToken */
			    this.State = 173; 
			    Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class OptionContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public OptionValueContext _optionValue;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public (OptionContext, Exception? error) option() {
		OptionContext _localctx = new OptionContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 10, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 175; 
			    	(var subCtx, _localError) = identifier();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._identifier = subCtx;
			    	}
			    }
			    /* STG: MatchToken */
			    this.State = 176; 
			    Match(ASSIGN);
			    /* STG: InvokeRule */
			    {
			    	this.State = 177; 
			    	(var subCtx, _localError) = optionValue();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._optionValue = subCtx;
			    	}
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class OptionValueContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public ActionBlockContext _actionBlock;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(ANTLRv4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(ANTLRv4Parser.DOT, i);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ITerminalNode INT() { return GetToken(ANTLRv4Parser.INT, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
	}

	[RuleVersion(0)]
	public (OptionValueContext, Exception? error) optionValue() {
		OptionValueContext _localctx = new OptionValueContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 12, RULE_optionValue);
		int _la;
		try {
			/* STG: LL1AltBlock */
			this.State = 190;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 179; 
				    	(var subCtx, _localError) = identifier();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._identifier = subCtx;
				    	}
				    }
				    /* STG: LL1StarBlockSingleAlt */
				    this.State = 184;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    while (_la==DOT) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    {
				    	    /* STG: CodeBlockForAlt */
				    	    	/* STG: locals */
				    	    	/* STG: preamble */
				    	    	/* STG: ops */
				    	        /* STG: MatchToken */
				    	        this.State = 180; 
				    	        Match(DOT);
				    	        /* STG: InvokeRule */
				    	        {
				    	        	this.State = 181; 
				    	        	(var subCtx, _localError) = identifier();
				    	        	if (_localError is not null) {
				    	        		if (_localError is RecognitionException re) {
				    	        			_localctx.exception = re;
				    	        			_errHandler.ReportError(this, re);
				    	        			_errHandler.Recover(this, re);
				    	        			return (_localctx, _localError);
				    	        		} else {
				    	        			throw _localError;
				    	        		}
				    	            } else {
				    	        		_localctx._identifier = subCtx;
				    	        	}
				    	        }
				    	    }
				    	}
				    	this.State = 186;
				    	_errHandler.Sync(this);
				    	_la = _input.La(1);
				    }
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 187; 
				    Match(STRING_LITERAL);
				}
				break;
			case BEGIN_ACTION:
				EnterOuterAlt(_localctx, 3);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 188; 
				    	(var subCtx, _localError) = actionBlock();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._actionBlock = subCtx;
				    	}
				    }
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 189; 
				    Match(INT);
				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class DelegateGrammarsContext : ParserRuleContext {
		public DelegateGrammarContext _delegateGrammar;
		public ITerminalNode IMPORT() { return GetToken(ANTLRv4Parser.IMPORT, 0); }
		public DelegateGrammarContext[] delegateGrammar() {
			return GetRuleContexts<DelegateGrammarContext>();
		}
		public DelegateGrammarContext delegateGrammar(int i) {
			return GetRuleContext<DelegateGrammarContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public DelegateGrammarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammars(this);
		}
	}

	[RuleVersion(0)]
	public (DelegateGrammarsContext, Exception? error) delegateGrammars() {
		DelegateGrammarsContext _localctx = new DelegateGrammarsContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 14, RULE_delegateGrammars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 192; 
			    Match(IMPORT);
			    /* STG: InvokeRule */
			    {
			    	this.State = 193; 
			    	(var subCtx, _localError) = delegateGrammar();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._delegateGrammar = subCtx;
			    	}
			    }
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 198;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==COMMA) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: MatchToken */
			    	        this.State = 194; 
			    	        Match(COMMA);
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 195; 
			    	        	(var subCtx, _localError) = delegateGrammar();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._delegateGrammar = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 200;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			    /* STG: MatchToken */
			    this.State = 201; 
			    Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class DelegateGrammarContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public DelegateGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammar(this);
		}
	}

	[RuleVersion(0)]
	public (DelegateGrammarContext, Exception? error) delegateGrammar() {
		DelegateGrammarContext _localctx = new DelegateGrammarContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 16, RULE_delegateGrammar);
		try {
			/* STG: AltBlock */
			this.State = 208;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 203; 
				    	(var subCtx, _localError) = identifier();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._identifier = subCtx;
				    	}
				    }
				    /* STG: MatchToken */
				    this.State = 204; 
				    Match(ASSIGN);
				    /* STG: InvokeRule */
				    {
				    	this.State = 205; 
				    	(var subCtx, _localError) = identifier();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._identifier = subCtx;
				    	}
				    }
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 207; 
				    	(var subCtx, _localError) = identifier();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._identifier = subCtx;
				    	}
				    }
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class TokensSpecContext : ParserRuleContext {
		public IdListContext _idList;
		public ITerminalNode TOKENS() { return GetToken(ANTLRv4Parser.TOKENS, 0); }
		public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
	}

	[RuleVersion(0)]
	public (TokensSpecContext, Exception? error) tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 18, RULE_tokensSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 210; 
			    Match(TOKENS);
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 212;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==TOKEN_REF || _la==RULE_REF) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 211; 
			    	    	(var subCtx, _localError) = idList();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._idList = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			    /* STG: MatchToken */
			    this.State = 214; 
			    Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ChannelsSpecContext : ParserRuleContext {
		public IdListContext _idList;
		public ITerminalNode CHANNELS() { return GetToken(ANTLRv4Parser.CHANNELS, 0); }
		public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public ChannelsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterChannelsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitChannelsSpec(this);
		}
	}

	[RuleVersion(0)]
	public (ChannelsSpecContext, Exception? error) channelsSpec() {
		ChannelsSpecContext _localctx = new ChannelsSpecContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 20, RULE_channelsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 216; 
			    Match(CHANNELS);
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 218;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==TOKEN_REF || _la==RULE_REF) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 217; 
			    	    	(var subCtx, _localError) = idList();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._idList = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			    /* STG: MatchToken */
			    this.State = 220; 
			    Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class IdListContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterIdList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitIdList(this);
		}
	}

	[RuleVersion(0)]
	public (IdListContext, Exception? error) idList() {
		IdListContext _localctx = new IdListContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 22, RULE_idList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 222; 
			    	(var subCtx, _localError) = identifier();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._identifier = subCtx;
			    	}
			    }
			    /* STG: StarBlock */
			    this.State = 227;
			    _errHandler.Sync(this);
			    _alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			    while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
			    	if ( _alt==1 ) {
			    		{
			    		/* STG: CodeBlockForAlt */
			    			/* STG: locals */
			    			/* STG: preamble */
			    			/* STG: ops */
			    		    {
			    		    /* STG: CodeBlockForAlt */
			    		    	/* STG: locals */
			    		    	/* STG: preamble */
			    		    	/* STG: ops */
			    		        /* STG: MatchToken */
			    		        this.State = 223; 
			    		        Match(COMMA);
			    		        /* STG: InvokeRule */
			    		        {
			    		        	this.State = 224; 
			    		        	(var subCtx, _localError) = identifier();
			    		        	if (_localError is not null) {
			    		        		if (_localError is RecognitionException re) {
			    		        			_localctx.exception = re;
			    		        			_errHandler.ReportError(this, re);
			    		        			_errHandler.Recover(this, re);
			    		        			return (_localctx, _localError);
			    		        		} else {
			    		        			throw _localError;
			    		        		}
			    		            } else {
			    		        		_localctx._identifier = subCtx;
			    		        	}
			    		        }
			    		    }
			    		} 
			    	}
			    	this.State = 229;
			    	_errHandler.Sync(this);
			    	_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			    }
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 231;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==COMMA) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: MatchToken */
			    	    this.State = 230; 
			    	    Match(COMMA);
			    	}
			    }

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class Action_Context : ParserRuleContext {
		public ActionScopeNameContext _actionScopeName;
		public IdentifierContext _identifier;
		public ActionBlockContext _actionBlock;
		public ITerminalNode AT() { return GetToken(ANTLRv4Parser.AT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(ANTLRv4Parser.COLONCOLON, 0); }
		public Action_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAction_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAction_(this);
		}
	}

	[RuleVersion(0)]
	public (Action_Context, Exception? error) action_() {
		Action_Context _localctx = new Action_Context(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 24, RULE_action_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 233; 
			    Match(AT);
			    /* STG: OptionalBlock */
			    this.State = 237;
			    _errHandler.Sync(this);
			    switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			    case 1:
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 234; 
			    	    	(var subCtx, _localError) = actionScopeName();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._actionScopeName = subCtx;
			    	    	}
			    	    }
			    	    /* STG: MatchToken */
			    	    this.State = 235; 
			    	    Match(COLONCOLON);
			    	}
			    	break;
			    }
			    /* STG: InvokeRule */
			    {
			    	this.State = 239; 
			    	(var subCtx, _localError) = identifier();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._identifier = subCtx;
			    	}
			    }
			    /* STG: InvokeRule */
			    {
			    	this.State = 240; 
			    	(var subCtx, _localError) = actionBlock();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._actionBlock = subCtx;
			    	}
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LEXER() { return GetToken(ANTLRv4Parser.LEXER, 0); }
		public ITerminalNode PARSER() { return GetToken(ANTLRv4Parser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
	}

	[RuleVersion(0)]
	public (ActionScopeNameContext, Exception? error) actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 26, RULE_actionScopeName);
		try {
			/* STG: LL1AltBlock */
			this.State = 245;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 242; 
				    	(var subCtx, _localError) = identifier();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._identifier = subCtx;
				    	}
				    }
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 243; 
				    Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 244; 
				    Match(PARSER);
				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ActionBlockContext : ParserRuleContext {
		public ITerminalNode BEGIN_ACTION() { return GetToken(ANTLRv4Parser.BEGIN_ACTION, 0); }
		public ITerminalNode END_ACTION() { return GetToken(ANTLRv4Parser.END_ACTION, 0); }
		public ITerminalNode[] ACTION_CONTENT() { return GetTokens(ANTLRv4Parser.ACTION_CONTENT); }
		public ITerminalNode ACTION_CONTENT(int i) {
			return GetToken(ANTLRv4Parser.ACTION_CONTENT, i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public (ActionBlockContext, Exception? error) actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 28, RULE_actionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 247; 
			    Match(BEGIN_ACTION);
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 251;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==ACTION_CONTENT) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: MatchToken */
			    	        this.State = 248; 
			    	        Match(ACTION_CONTENT);
			    	    }
			    	}
			    	this.State = 253;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			    /* STG: MatchToken */
			    this.State = 254; 
			    Match(END_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ArgActionBlockContext : ParserRuleContext {
		public ITerminalNode BEGIN_ARGUMENT() { return GetToken(ANTLRv4Parser.BEGIN_ARGUMENT, 0); }
		public ITerminalNode END_ARGUMENT() { return GetToken(ANTLRv4Parser.END_ARGUMENT, 0); }
		public ITerminalNode[] ARGUMENT_CONTENT() { return GetTokens(ANTLRv4Parser.ARGUMENT_CONTENT); }
		public ITerminalNode ARGUMENT_CONTENT(int i) {
			return GetToken(ANTLRv4Parser.ARGUMENT_CONTENT, i);
		}
		public ArgActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argActionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterArgActionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitArgActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public (ArgActionBlockContext, Exception? error) argActionBlock() {
		ArgActionBlockContext _localctx = new ArgActionBlockContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 30, RULE_argActionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 256; 
			    Match(BEGIN_ARGUMENT);
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 260;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==ARGUMENT_CONTENT) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: MatchToken */
			    	        this.State = 257; 
			    	        Match(ARGUMENT_CONTENT);
			    	    }
			    	}
			    	this.State = 262;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			    /* STG: MatchToken */
			    this.State = 263; 
			    Match(END_ARGUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ModeSpecContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public LexerRuleSpecContext _lexerRuleSpec;
		public ITerminalNode MODE() { return GetToken(ANTLRv4Parser.MODE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public LexerRuleSpecContext[] lexerRuleSpec() {
			return GetRuleContexts<LexerRuleSpecContext>();
		}
		public LexerRuleSpecContext lexerRuleSpec(int i) {
			return GetRuleContext<LexerRuleSpecContext>(i);
		}
		public ModeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterModeSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitModeSpec(this);
		}
	}

	[RuleVersion(0)]
	public (ModeSpecContext, Exception? error) modeSpec() {
		ModeSpecContext _localctx = new ModeSpecContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 32, RULE_modeSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 265; 
			    Match(MODE);
			    /* STG: InvokeRule */
			    {
			    	this.State = 266; 
			    	(var subCtx, _localError) = identifier();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._identifier = subCtx;
			    	}
			    }
			    /* STG: MatchToken */
			    this.State = 267; 
			    Match(SEMI);
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 271;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==TOKEN_REF || _la==FRAGMENT) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 268; 
			    	        	(var subCtx, _localError) = lexerRuleSpec();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._lexerRuleSpec = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 273;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleSpecContext _ruleSpec;
		public RuleSpecContext[] ruleSpec() {
			return GetRuleContexts<RuleSpecContext>();
		}
		public RuleSpecContext ruleSpec(int i) {
			return GetRuleContext<RuleSpecContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public (RulesContext, Exception? error) rules() {
		RulesContext _localctx = new RulesContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 34, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 277;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 274; 
			    	        	(var subCtx, _localError) = ruleSpec();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._ruleSpec = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 279;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class RuleSpecContext : ParserRuleContext {
		public ParserRuleSpecContext _parserRuleSpec;
		public LexerRuleSpecContext _lexerRuleSpec;
		public ParserRuleSpecContext parserRuleSpec() {
			return GetRuleContext<ParserRuleSpecContext>(0);
		}
		public LexerRuleSpecContext lexerRuleSpec() {
			return GetRuleContext<LexerRuleSpecContext>(0);
		}
		public RuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleSpec(this);
		}
	}

	[RuleVersion(0)]
	public (RuleSpecContext, Exception? error) ruleSpec() {
		RuleSpecContext _localctx = new RuleSpecContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 36, RULE_ruleSpec);
		try {
			/* STG: AltBlock */
			this.State = 282;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 280; 
				    	(var subCtx, _localError) = parserRuleSpec();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._parserRuleSpec = subCtx;
				    	}
				    }
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 281; 
				    	(var subCtx, _localError) = lexerRuleSpec();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._lexerRuleSpec = subCtx;
				    	}
				    }
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ParserRuleSpecContext : ParserRuleContext {
		public RuleModifiersContext _ruleModifiers;
		public ArgActionBlockContext _argActionBlock;
		public RuleReturnsContext _ruleReturns;
		public ThrowsSpecContext _throwsSpec;
		public LocalsSpecContext _localsSpec;
		public RulePrequelContext _rulePrequel;
		public RuleBlockContext _ruleBlock;
		public ExceptionGroupContext _exceptionGroup;
		public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
		public RuleBlockContext ruleBlock() {
			return GetRuleContext<RuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		public RuleModifiersContext ruleModifiers() {
			return GetRuleContext<RuleModifiersContext>(0);
		}
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public RuleReturnsContext ruleReturns() {
			return GetRuleContext<RuleReturnsContext>(0);
		}
		public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		public LocalsSpecContext localsSpec() {
			return GetRuleContext<LocalsSpecContext>(0);
		}
		public RulePrequelContext[] rulePrequel() {
			return GetRuleContexts<RulePrequelContext>();
		}
		public RulePrequelContext rulePrequel(int i) {
			return GetRuleContext<RulePrequelContext>(i);
		}
		public ParserRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterParserRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitParserRuleSpec(this);
		}
	}

	[RuleVersion(0)]
	public (ParserRuleSpecContext, Exception? error) parserRuleSpec() {
		ParserRuleSpecContext _localctx = new ParserRuleSpecContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 38, RULE_parserRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 285;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 284; 
			    	    	(var subCtx, _localError) = ruleModifiers();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._ruleModifiers = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			    /* STG: MatchToken */
			    this.State = 287; 
			    Match(RULE_REF);
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 289;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==BEGIN_ARGUMENT) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 288; 
			    	    	(var subCtx, _localError) = argActionBlock();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._argActionBlock = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 292;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==RETURNS) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 291; 
			    	    	(var subCtx, _localError) = ruleReturns();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._ruleReturns = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 295;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==THROWS) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 294; 
			    	    	(var subCtx, _localError) = throwsSpec();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._throwsSpec = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 298;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==LOCALS) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 297; 
			    	    	(var subCtx, _localError) = localsSpec();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._localsSpec = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 303;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==OPTIONS || _la==AT) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 300; 
			    	        	(var subCtx, _localError) = rulePrequel();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._rulePrequel = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 305;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			    /* STG: MatchToken */
			    this.State = 306; 
			    Match(COLON);
			    /* STG: InvokeRule */
			    {
			    	this.State = 307; 
			    	(var subCtx, _localError) = ruleBlock();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._ruleBlock = subCtx;
			    	}
			    }
			    /* STG: MatchToken */
			    this.State = 308; 
			    Match(SEMI);
			    /* STG: InvokeRule */
			    {
			    	this.State = 309; 
			    	(var subCtx, _localError) = exceptionGroup();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._exceptionGroup = subCtx;
			    	}
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		public ExceptionHandlerContext _exceptionHandler;
		public FinallyClauseContext _finallyClause;
		public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
	}

	[RuleVersion(0)]
	public (ExceptionGroupContext, Exception? error) exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 40, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 314;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==CATCH) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 311; 
			    	        	(var subCtx, _localError) = exceptionHandler();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._exceptionHandler = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 316;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 318;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==FINALLY) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 317; 
			    	    	(var subCtx, _localError) = finallyClause();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._finallyClause = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		public ArgActionBlockContext _argActionBlock;
		public ActionBlockContext _actionBlock;
		public ITerminalNode CATCH() { return GetToken(ANTLRv4Parser.CATCH, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
	}

	[RuleVersion(0)]
	public (ExceptionHandlerContext, Exception? error) exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 42, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 320; 
			    Match(CATCH);
			    /* STG: InvokeRule */
			    {
			    	this.State = 321; 
			    	(var subCtx, _localError) = argActionBlock();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._argActionBlock = subCtx;
			    	}
			    }
			    /* STG: InvokeRule */
			    {
			    	this.State = 322; 
			    	(var subCtx, _localError) = actionBlock();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._actionBlock = subCtx;
			    	}
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public ActionBlockContext _actionBlock;
		public ITerminalNode FINALLY() { return GetToken(ANTLRv4Parser.FINALLY, 0); }
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
	}

	[RuleVersion(0)]
	public (FinallyClauseContext, Exception? error) finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 44, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 324; 
			    Match(FINALLY);
			    /* STG: InvokeRule */
			    {
			    	this.State = 325; 
			    	(var subCtx, _localError) = actionBlock();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._actionBlock = subCtx;
			    	}
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class RulePrequelContext : ParserRuleContext {
		public OptionsSpecContext _optionsSpec;
		public RuleActionContext _ruleAction;
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext ruleAction() {
			return GetRuleContext<RuleActionContext>(0);
		}
		public RulePrequelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulePrequel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRulePrequel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRulePrequel(this);
		}
	}

	[RuleVersion(0)]
	public (RulePrequelContext, Exception? error) rulePrequel() {
		RulePrequelContext _localctx = new RulePrequelContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 46, RULE_rulePrequel);
		try {
			/* STG: LL1AltBlock */
			this.State = 329;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 327; 
				    	(var subCtx, _localError) = optionsSpec();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._optionsSpec = subCtx;
				    	}
				    }
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 328; 
				    	(var subCtx, _localError) = ruleAction();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._ruleAction = subCtx;
				    	}
				    }
				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class RuleReturnsContext : ParserRuleContext {
		public ArgActionBlockContext _argActionBlock;
		public ITerminalNode RETURNS() { return GetToken(ANTLRv4Parser.RETURNS, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public RuleReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleReturns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleReturns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleReturns(this);
		}
	}

	[RuleVersion(0)]
	public (RuleReturnsContext, Exception? error) ruleReturns() {
		RuleReturnsContext _localctx = new RuleReturnsContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 48, RULE_ruleReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 331; 
			    Match(RETURNS);
			    /* STG: InvokeRule */
			    {
			    	this.State = 332; 
			    	(var subCtx, _localError) = argActionBlock();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._argActionBlock = subCtx;
			    	}
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public ITerminalNode THROWS() { return GetToken(ANTLRv4Parser.THROWS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
	}

	[RuleVersion(0)]
	public (ThrowsSpecContext, Exception? error) throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 50, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 334; 
			    Match(THROWS);
			    /* STG: InvokeRule */
			    {
			    	this.State = 335; 
			    	(var subCtx, _localError) = identifier();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._identifier = subCtx;
			    	}
			    }
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 340;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==COMMA) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: MatchToken */
			    	        this.State = 336; 
			    	        Match(COMMA);
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 337; 
			    	        	(var subCtx, _localError) = identifier();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._identifier = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 342;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LocalsSpecContext : ParserRuleContext {
		public ArgActionBlockContext _argActionBlock;
		public ITerminalNode LOCALS() { return GetToken(ANTLRv4Parser.LOCALS, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public LocalsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLocalsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLocalsSpec(this);
		}
	}

	[RuleVersion(0)]
	public (LocalsSpecContext, Exception? error) localsSpec() {
		LocalsSpecContext _localctx = new LocalsSpecContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 52, RULE_localsSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 343; 
			    Match(LOCALS);
			    /* STG: InvokeRule */
			    {
			    	this.State = 344; 
			    	(var subCtx, _localError) = argActionBlock();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._argActionBlock = subCtx;
			    	}
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class RuleActionContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public ActionBlockContext _actionBlock;
		public ITerminalNode AT() { return GetToken(ANTLRv4Parser.AT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
	}

	[RuleVersion(0)]
	public (RuleActionContext, Exception? error) ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 54, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 346; 
			    Match(AT);
			    /* STG: InvokeRule */
			    {
			    	this.State = 347; 
			    	(var subCtx, _localError) = identifier();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._identifier = subCtx;
			    	}
			    }
			    /* STG: InvokeRule */
			    {
			    	this.State = 348; 
			    	(var subCtx, _localError) = actionBlock();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._actionBlock = subCtx;
			    	}
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class RuleModifiersContext : ParserRuleContext {
		public RuleModifierContext _ruleModifier;
		public RuleModifierContext[] ruleModifier() {
			return GetRuleContexts<RuleModifierContext>();
		}
		public RuleModifierContext ruleModifier(int i) {
			return GetRuleContext<RuleModifierContext>(i);
		}
		public RuleModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifiers(this);
		}
	}

	[RuleVersion(0)]
	public (RuleModifiersContext, Exception? error) ruleModifiers() {
		RuleModifiersContext _localctx = new RuleModifiersContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 56, RULE_ruleModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: LL1PlusBlockSingleAlt */
			    this.State = 351;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    do {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 350; 
			    	        	(var subCtx, _localError) = ruleModifier();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._ruleModifier = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 353;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    } while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class RuleModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(ANTLRv4Parser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(ANTLRv4Parser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(ANTLRv4Parser.PROTECTED, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(ANTLRv4Parser.FRAGMENT, 0); }
		public RuleModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifier(this);
		}
	}

	[RuleVersion(0)]
	public (RuleModifierContext, Exception? error) ruleModifier() {
		RuleModifierContext _localctx = new RuleModifierContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 58, RULE_ruleModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: CommonSetStuff */
			    this.State = 355;
			    _la = _input.La(1);
			    if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) ) {
			    _errHandler.RecoverInline(this);
			    } else {
			    	if (_input.La(1) == TokenConstants.Eof) {
			    		matchedEOF = true;
			    	}

			    	_errHandler.ReportMatch(this);
			    	Consume();
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class RuleBlockContext : ParserRuleContext {
		public RuleAltListContext _ruleAltList;
		public RuleAltListContext ruleAltList() {
			return GetRuleContext<RuleAltListContext>(0);
		}
		public RuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleBlock(this);
		}
	}

	[RuleVersion(0)]
	public (RuleBlockContext, Exception? error) ruleBlock() {
		RuleBlockContext _localctx = new RuleBlockContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 60, RULE_ruleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 357; 
			    	(var subCtx, _localError) = ruleAltList();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._ruleAltList = subCtx;
			    	}
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class RuleAltListContext : ParserRuleContext {
		public LabeledAltContext _labeledAlt;
		public LabeledAltContext[] labeledAlt() {
			return GetRuleContexts<LabeledAltContext>();
		}
		public LabeledAltContext labeledAlt(int i) {
			return GetRuleContext<LabeledAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public RuleAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAltList(this);
		}
	}

	[RuleVersion(0)]
	public (RuleAltListContext, Exception? error) ruleAltList() {
		RuleAltListContext _localctx = new RuleAltListContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 62, RULE_ruleAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 359; 
			    	(var subCtx, _localError) = labeledAlt();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._labeledAlt = subCtx;
			    	}
			    }
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 364;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==OR) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: MatchToken */
			    	        this.State = 360; 
			    	        Match(OR);
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 361; 
			    	        	(var subCtx, _localError) = labeledAlt();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._labeledAlt = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 366;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LabeledAltContext : ParserRuleContext {
		public AlternativeContext _alternative;
		public IdentifierContext _identifier;
		public AlternativeContext alternative() {
			return GetRuleContext<AlternativeContext>(0);
		}
		public ITerminalNode POUND() { return GetToken(ANTLRv4Parser.POUND, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabeledAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledAlt(this);
		}
	}

	[RuleVersion(0)]
	public (LabeledAltContext, Exception? error) labeledAlt() {
		LabeledAltContext _localctx = new LabeledAltContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 64, RULE_labeledAlt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 367; 
			    	(var subCtx, _localError) = alternative();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._alternative = subCtx;
			    	}
			    }
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 370;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==POUND) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: MatchToken */
			    	    this.State = 368; 
			    	    Match(POUND);
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 369; 
			    	    	(var subCtx, _localError) = identifier();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._identifier = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LexerRuleSpecContext : ParserRuleContext {
		public OptionsSpecContext _optionsSpec;
		public LexerRuleBlockContext _lexerRuleBlock;
		public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
		public LexerRuleBlockContext lexerRuleBlock() {
			return GetRuleContext<LexerRuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(ANTLRv4Parser.FRAGMENT, 0); }
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public LexerRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleSpec(this);
		}
	}

	[RuleVersion(0)]
	public (LexerRuleSpecContext, Exception? error) lexerRuleSpec() {
		LexerRuleSpecContext _localctx = new LexerRuleSpecContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 66, RULE_lexerRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 373;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==FRAGMENT) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: MatchToken */
			    	    this.State = 372; 
			    	    Match(FRAGMENT);
			    	}
			    }

			    /* STG: MatchToken */
			    this.State = 375; 
			    Match(TOKEN_REF);
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 377;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==OPTIONS) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 376; 
			    	    	(var subCtx, _localError) = optionsSpec();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._optionsSpec = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			    /* STG: MatchToken */
			    this.State = 379; 
			    Match(COLON);
			    /* STG: InvokeRule */
			    {
			    	this.State = 380; 
			    	(var subCtx, _localError) = lexerRuleBlock();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._lexerRuleBlock = subCtx;
			    	}
			    }
			    /* STG: MatchToken */
			    this.State = 381; 
			    Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LexerRuleBlockContext : ParserRuleContext {
		public LexerAltListContext _lexerAltList;
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleBlock(this);
		}
	}

	[RuleVersion(0)]
	public (LexerRuleBlockContext, Exception? error) lexerRuleBlock() {
		LexerRuleBlockContext _localctx = new LexerRuleBlockContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 68, RULE_lexerRuleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 383; 
			    	(var subCtx, _localError) = lexerAltList();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._lexerAltList = subCtx;
			    	}
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LexerAltListContext : ParserRuleContext {
		public LexerAltContext _lexerAlt;
		public LexerAltContext[] lexerAlt() {
			return GetRuleContexts<LexerAltContext>();
		}
		public LexerAltContext lexerAlt(int i) {
			return GetRuleContext<LexerAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public LexerAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAltList(this);
		}
	}

	[RuleVersion(0)]
	public (LexerAltListContext, Exception? error) lexerAltList() {
		LexerAltListContext _localctx = new LexerAltListContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 70, RULE_lexerAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 385; 
			    	(var subCtx, _localError) = lexerAlt();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._lexerAlt = subCtx;
			    	}
			    }
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 390;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==OR) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: MatchToken */
			    	        this.State = 386; 
			    	        Match(OR);
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 387; 
			    	        	(var subCtx, _localError) = lexerAlt();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._lexerAlt = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 392;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LexerAltContext : ParserRuleContext {
		public LexerElementsContext _lexerElements;
		public LexerCommandsContext _lexerCommands;
		public LexerElementsContext lexerElements() {
			return GetRuleContext<LexerElementsContext>(0);
		}
		public LexerCommandsContext lexerCommands() {
			return GetRuleContext<LexerCommandsContext>(0);
		}
		public LexerAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAlt(this);
		}
	}

	[RuleVersion(0)]
	public (LexerAltContext, Exception? error) lexerAlt() {
		LexerAltContext _localctx = new LexerAltContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 72, RULE_lexerAlt);
		int _la;
		try {
			/* STG: AltBlock */
			this.State = 398;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 393; 
				    	(var subCtx, _localError) = lexerElements();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._lexerElements = subCtx;
				    	}
				    }
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 395;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==RARROW) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 394; 
				    	    	(var subCtx, _localError) = lexerCommands();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._lexerCommands = subCtx;
				    	    	}
				    	    }
				    	}
				    }

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LexerElementsContext : ParserRuleContext {
		public LexerElementContext _lexerElement;
		public LexerElementContext[] lexerElement() {
			return GetRuleContexts<LexerElementContext>();
		}
		public LexerElementContext lexerElement(int i) {
			return GetRuleContext<LexerElementContext>(i);
		}
		public LexerElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElements(this);
		}
	}

	[RuleVersion(0)]
	public (LexerElementsContext, Exception? error) lexerElements() {
		LexerElementsContext _localctx = new LexerElementsContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 74, RULE_lexerElements);
		int _la;
		try {
			/* STG: LL1AltBlock */
			this.State = 406;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TOKEN_REF:
			case LEXER_CHAR_SET:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case LPAREN:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: LL1PlusBlockSingleAlt */
				    this.State = 401;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    do {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    {
				    	    /* STG: CodeBlockForAlt */
				    	    	/* STG: locals */
				    	    	/* STG: preamble */
				    	    	/* STG: ops */
				    	        /* STG: InvokeRule */
				    	        {
				    	        	this.State = 400; 
				    	        	(var subCtx, _localError) = lexerElement();
				    	        	if (_localError is not null) {
				    	        		if (_localError is RecognitionException re) {
				    	        			_localctx.exception = re;
				    	        			_errHandler.ReportError(this, re);
				    	        			_errHandler.Recover(this, re);
				    	        			return (_localctx, _localError);
				    	        		} else {
				    	        			throw _localError;
				    	        		}
				    	            } else {
				    	        		_localctx._lexerElement = subCtx;
				    	        	}
				    	        }
				    	    }
				    	}
				    	this.State = 403;
				    	_errHandler.Sync(this);
				    	_la = _input.La(1);
				    } while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << LEXER_CHAR_SET) | (1L << STRING_LITERAL) | (1L << BEGIN_ACTION) | (1L << LPAREN) | (1L << DOT) | (1L << NOT))) != 0) );
				}
				break;
			case SEMI:
			case RPAREN:
			case RARROW:
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LexerElementContext : ParserRuleContext {
		public LexerAtomContext _lexerAtom;
		public EbnfSuffixContext _ebnfSuffix;
		public LexerBlockContext _lexerBlock;
		public ActionBlockContext _actionBlock;
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public LexerBlockContext lexerBlock() {
			return GetRuleContext<LexerBlockContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ITerminalNode QUESTION() { return GetToken(ANTLRv4Parser.QUESTION, 0); }
		public LexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElement(this);
		}
	}

	[RuleVersion(0)]
	public (LexerElementContext, Exception? error) lexerElement() {
		LexerElementContext _localctx = new LexerElementContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 76, RULE_lexerElement);
		int _la;
		try {
			/* STG: LL1AltBlock */
			this.State = 420;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TOKEN_REF:
			case LEXER_CHAR_SET:
			case STRING_LITERAL:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 408; 
				    	(var subCtx, _localError) = lexerAtom();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._lexerAtom = subCtx;
				    	}
				    }
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 410;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 409; 
				    	    	(var subCtx, _localError) = ebnfSuffix();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._ebnfSuffix = subCtx;
				    	    	}
				    	    }
				    	}
				    }

				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 412; 
				    	(var subCtx, _localError) = lexerBlock();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._lexerBlock = subCtx;
				    	}
				    }
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 414;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 413; 
				    	    	(var subCtx, _localError) = ebnfSuffix();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._ebnfSuffix = subCtx;
				    	    	}
				    	    }
				    	}
				    }

				}
				break;
			case BEGIN_ACTION:
				EnterOuterAlt(_localctx, 3);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 416; 
				    	(var subCtx, _localError) = actionBlock();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._actionBlock = subCtx;
				    	}
				    }
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 418;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==QUESTION) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: MatchToken */
				    	    this.State = 417; 
				    	    Match(QUESTION);
				    	}
				    }

				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LexerBlockContext : ParserRuleContext {
		public LexerAltListContext _lexerAltList;
		public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public LexerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerBlock(this);
		}
	}

	[RuleVersion(0)]
	public (LexerBlockContext, Exception? error) lexerBlock() {
		LexerBlockContext _localctx = new LexerBlockContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 78, RULE_lexerBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 422; 
			    Match(LPAREN);
			    /* STG: InvokeRule */
			    {
			    	this.State = 423; 
			    	(var subCtx, _localError) = lexerAltList();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._lexerAltList = subCtx;
			    	}
			    }
			    /* STG: MatchToken */
			    this.State = 424; 
			    Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LexerCommandsContext : ParserRuleContext {
		public LexerCommandContext _lexerCommand;
		public ITerminalNode RARROW() { return GetToken(ANTLRv4Parser.RARROW, 0); }
		public LexerCommandContext[] lexerCommand() {
			return GetRuleContexts<LexerCommandContext>();
		}
		public LexerCommandContext lexerCommand(int i) {
			return GetRuleContext<LexerCommandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public LexerCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommands(this);
		}
	}

	[RuleVersion(0)]
	public (LexerCommandsContext, Exception? error) lexerCommands() {
		LexerCommandsContext _localctx = new LexerCommandsContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 80, RULE_lexerCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 426; 
			    Match(RARROW);
			    /* STG: InvokeRule */
			    {
			    	this.State = 427; 
			    	(var subCtx, _localError) = lexerCommand();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._lexerCommand = subCtx;
			    	}
			    }
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 432;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==COMMA) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: MatchToken */
			    	        this.State = 428; 
			    	        Match(COMMA);
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 429; 
			    	        	(var subCtx, _localError) = lexerCommand();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._lexerCommand = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 434;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LexerCommandContext : ParserRuleContext {
		public LexerCommandNameContext _lexerCommandName;
		public LexerCommandExprContext _lexerCommandExpr;
		public LexerCommandNameContext lexerCommandName() {
			return GetRuleContext<LexerCommandNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		public LexerCommandExprContext lexerCommandExpr() {
			return GetRuleContext<LexerCommandExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public LexerCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommand(this);
		}
	}

	[RuleVersion(0)]
	public (LexerCommandContext, Exception? error) lexerCommand() {
		LexerCommandContext _localctx = new LexerCommandContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 82, RULE_lexerCommand);
		try {
			/* STG: AltBlock */
			this.State = 441;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 435; 
				    	(var subCtx, _localError) = lexerCommandName();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._lexerCommandName = subCtx;
				    	}
				    }
				    /* STG: MatchToken */
				    this.State = 436; 
				    Match(LPAREN);
				    /* STG: InvokeRule */
				    {
				    	this.State = 437; 
				    	(var subCtx, _localError) = lexerCommandExpr();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._lexerCommandExpr = subCtx;
				    	}
				    }
				    /* STG: MatchToken */
				    this.State = 438; 
				    Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 440; 
				    	(var subCtx, _localError) = lexerCommandName();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._lexerCommandName = subCtx;
				    	}
				    }
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LexerCommandNameContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode MODE() { return GetToken(ANTLRv4Parser.MODE, 0); }
		public LexerCommandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandName(this);
		}
	}

	[RuleVersion(0)]
	public (LexerCommandNameContext, Exception? error) lexerCommandName() {
		LexerCommandNameContext _localctx = new LexerCommandNameContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 84, RULE_lexerCommandName);
		try {
			/* STG: LL1AltBlock */
			this.State = 445;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 443; 
				    	(var subCtx, _localError) = identifier();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._identifier = subCtx;
				    	}
				    }
				}
				break;
			case MODE:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 444; 
				    Match(MODE);
				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LexerCommandExprContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode INT() { return GetToken(ANTLRv4Parser.INT, 0); }
		public LexerCommandExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandExpr(this);
		}
	}

	[RuleVersion(0)]
	public (LexerCommandExprContext, Exception? error) lexerCommandExpr() {
		LexerCommandExprContext _localctx = new LexerCommandExprContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 86, RULE_lexerCommandExpr);
		try {
			/* STG: LL1AltBlock */
			this.State = 449;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 447; 
				    	(var subCtx, _localError) = identifier();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._identifier = subCtx;
				    	}
				    }
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 448; 
				    Match(INT);
				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class AltListContext : ParserRuleContext {
		public AlternativeContext _alternative;
		public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
	}

	[RuleVersion(0)]
	public (AltListContext, Exception? error) altList() {
		AltListContext _localctx = new AltListContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 88, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 451; 
			    	(var subCtx, _localError) = alternative();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._alternative = subCtx;
			    	}
			    }
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 456;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==OR) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: MatchToken */
			    	        this.State = 452; 
			    	        Match(OR);
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 453; 
			    	        	(var subCtx, _localError) = alternative();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._alternative = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 458;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class AlternativeContext : ParserRuleContext {
		public ElementOptionsContext _elementOptions;
		public ElementContext _element;
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
	}

	[RuleVersion(0)]
	public (AlternativeContext, Exception? error) alternative() {
		AlternativeContext _localctx = new AlternativeContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 90, RULE_alternative);
		int _la;
		try {
			/* STG: LL1AltBlock */
			this.State = 468;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case LPAREN:
			case LT:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 460;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==LT) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 459; 
				    	    	(var subCtx, _localError) = elementOptions();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._elementOptions = subCtx;
				    	    	}
				    	    }
				    	}
				    }

				    /* STG: LL1PlusBlockSingleAlt */
				    this.State = 463;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    do {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    {
				    	    /* STG: CodeBlockForAlt */
				    	    	/* STG: locals */
				    	    	/* STG: preamble */
				    	    	/* STG: ops */
				    	        /* STG: InvokeRule */
				    	        {
				    	        	this.State = 462; 
				    	        	(var subCtx, _localError) = element();
				    	        	if (_localError is not null) {
				    	        		if (_localError is RecognitionException re) {
				    	        			_localctx.exception = re;
				    	        			_errHandler.ReportError(this, re);
				    	        			_errHandler.Recover(this, re);
				    	        			return (_localctx, _localError);
				    	        		} else {
				    	        			throw _localError;
				    	        		}
				    	            } else {
				    	        		_localctx._element = subCtx;
				    	        	}
				    	        }
				    	    }
				    	}
				    	this.State = 465;
				    	_errHandler.Sync(this);
				    	_la = _input.La(1);
				    } while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << STRING_LITERAL) | (1L << BEGIN_ACTION) | (1L << LPAREN) | (1L << DOT) | (1L << NOT))) != 0) );
				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
			case POUND:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ElementContext : ParserRuleContext {
		public LabeledElementContext _labeledElement;
		public EbnfSuffixContext _ebnfSuffix;
		public AtomContext _atom;
		public EbnfContext _ebnf;
		public ActionBlockContext _actionBlock;
		public PredicateOptionsContext _predicateOptions;
		public LabeledElementContext labeledElement() {
			return GetRuleContext<LabeledElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ITerminalNode QUESTION() { return GetToken(ANTLRv4Parser.QUESTION, 0); }
		public PredicateOptionsContext predicateOptions() {
			return GetRuleContext<PredicateOptionsContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public (ElementContext, Exception? error) element() {
		ElementContext _localctx = new ElementContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 92, RULE_element);
		int _la;
		try {
			/* STG: AltBlock */
			this.State = 488;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 470; 
				    	(var subCtx, _localError) = labeledElement();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._labeledElement = subCtx;
				    	}
				    }
				    /* STG: LL1AltBlock */
				    this.State = 473;
				    _errHandler.Sync(this);
				    switch (_input.La(1)) {
				    case QUESTION:
				    case STAR:
				    case PLUS:
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 471; 
				    	    	(var subCtx, _localError) = ebnfSuffix();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._ebnfSuffix = subCtx;
				    	    	}
				    	    }
				    	}
				    	break;
				    case TOKEN_REF:
				    case RULE_REF:
				    case STRING_LITERAL:
				    case BEGIN_ACTION:
				    case SEMI:
				    case LPAREN:
				    case RPAREN:
				    case OR:
				    case DOT:
				    case POUND:
				    case NOT:
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	}
				    	break;
				    default:
				    	{
				    		/* STG: ThrowNoViableAlt */
				    		// throw new NoViableAltException(this);

				    		var re = new NoViableAltException(this);
				    		_localctx.exception = re;
				    		_errHandler.ReportError(this, re);
				    		_errHandler.Recover(this, re);

				    		// ExitRule();
				    		return (_localctx, re);
				    	}
				    }
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 475; 
				    	(var subCtx, _localError) = atom();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._atom = subCtx;
				    	}
				    }
				    /* STG: LL1AltBlock */
				    this.State = 478;
				    _errHandler.Sync(this);
				    switch (_input.La(1)) {
				    case QUESTION:
				    case STAR:
				    case PLUS:
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 476; 
				    	    	(var subCtx, _localError) = ebnfSuffix();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._ebnfSuffix = subCtx;
				    	    	}
				    	    }
				    	}
				    	break;
				    case TOKEN_REF:
				    case RULE_REF:
				    case STRING_LITERAL:
				    case BEGIN_ACTION:
				    case SEMI:
				    case LPAREN:
				    case RPAREN:
				    case OR:
				    case DOT:
				    case POUND:
				    case NOT:
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	}
				    	break;
				    default:
				    	{
				    		/* STG: ThrowNoViableAlt */
				    		// throw new NoViableAltException(this);

				    		var re = new NoViableAltException(this);
				    		_localctx.exception = re;
				    		_errHandler.ReportError(this, re);
				    		_errHandler.Recover(this, re);

				    		// ExitRule();
				    		return (_localctx, re);
				    	}
				    }
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 480; 
				    	(var subCtx, _localError) = ebnf();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._ebnf = subCtx;
				    	}
				    }
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 481; 
				    	(var subCtx, _localError) = actionBlock();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._actionBlock = subCtx;
				    	}
				    }
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 486;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==QUESTION) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: MatchToken */
				    	    this.State = 482; 
				    	    Match(QUESTION);
				    	    /* STG: LL1OptionalBlockSingleAlt */
				    	    this.State = 484;
				    	    _errHandler.Sync(this);
				    	    _la = _input.La(1);
				    	    if (_la==LT) {
				    	    	{
				    	    	/* STG: CodeBlockForAlt */
				    	    		/* STG: locals */
				    	    		/* STG: preamble */
				    	    		/* STG: ops */
				    	    	    /* STG: InvokeRule */
				    	    	    {
				    	    	    	this.State = 483; 
				    	    	    	(var subCtx, _localError) = predicateOptions();
				    	    	    	if (_localError is not null) {
				    	    	    		if (_localError is RecognitionException re) {
				    	    	    			_localctx.exception = re;
				    	    	    			_errHandler.ReportError(this, re);
				    	    	    			_errHandler.Recover(this, re);
				    	    	    			return (_localctx, _localError);
				    	    	    		} else {
				    	    	    			throw _localError;
				    	    	    		}
				    	    	        } else {
				    	    	    		_localctx._predicateOptions = subCtx;
				    	    	    	}
				    	    	    }
				    	    	}
				    	    }

				    	}
				    }

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class PredicateOptionsContext : ParserRuleContext {
		public PredicateOptionContext _predicateOption;
		public ITerminalNode LT() { return GetToken(ANTLRv4Parser.LT, 0); }
		public PredicateOptionContext[] predicateOption() {
			return GetRuleContexts<PredicateOptionContext>();
		}
		public PredicateOptionContext predicateOption(int i) {
			return GetRuleContext<PredicateOptionContext>(i);
		}
		public ITerminalNode GT() { return GetToken(ANTLRv4Parser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public PredicateOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterPredicateOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitPredicateOptions(this);
		}
	}

	[RuleVersion(0)]
	public (PredicateOptionsContext, Exception? error) predicateOptions() {
		PredicateOptionsContext _localctx = new PredicateOptionsContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 94, RULE_predicateOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 490; 
			    Match(LT);
			    /* STG: InvokeRule */
			    {
			    	this.State = 491; 
			    	(var subCtx, _localError) = predicateOption();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._predicateOption = subCtx;
			    	}
			    }
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 496;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==COMMA) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: MatchToken */
			    	        this.State = 492; 
			    	        Match(COMMA);
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 493; 
			    	        	(var subCtx, _localError) = predicateOption();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._predicateOption = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 498;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			    /* STG: MatchToken */
			    this.State = 499; 
			    Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class PredicateOptionContext : ParserRuleContext {
		public ElementOptionContext _elementOption;
		public IdentifierContext _identifier;
		public ActionBlockContext _actionBlock;
		public ElementOptionContext elementOption() {
			return GetRuleContext<ElementOptionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public PredicateOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterPredicateOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitPredicateOption(this);
		}
	}

	[RuleVersion(0)]
	public (PredicateOptionContext, Exception? error) predicateOption() {
		PredicateOptionContext _localctx = new PredicateOptionContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 96, RULE_predicateOption);
		try {
			/* STG: AltBlock */
			this.State = 506;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 501; 
				    	(var subCtx, _localError) = elementOption();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._elementOption = subCtx;
				    	}
				    }
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 502; 
				    	(var subCtx, _localError) = identifier();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._identifier = subCtx;
				    	}
				    }
				    /* STG: MatchToken */
				    this.State = 503; 
				    Match(ASSIGN);
				    /* STG: InvokeRule */
				    {
				    	this.State = 504; 
				    	(var subCtx, _localError) = actionBlock();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._actionBlock = subCtx;
				    	}
				    }
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LabeledElementContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public AtomContext _atom;
		public BlockContext _block;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(ANTLRv4Parser.PLUS_ASSIGN, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledElement(this);
		}
	}

	[RuleVersion(0)]
	public (LabeledElementContext, Exception? error) labeledElement() {
		LabeledElementContext _localctx = new LabeledElementContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 98, RULE_labeledElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 508; 
			    	(var subCtx, _localError) = identifier();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._identifier = subCtx;
			    	}
			    }
			    /* STG: CommonSetStuff */
			    this.State = 509;
			    _la = _input.La(1);
			    if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			    _errHandler.RecoverInline(this);
			    } else {
			    	if (_input.La(1) == TokenConstants.Eof) {
			    		matchedEOF = true;
			    	}

			    	_errHandler.ReportMatch(this);
			    	Consume();
			    }
			    /* STG: LL1AltBlock */
			    this.State = 512;
			    _errHandler.Sync(this);
			    switch (_input.La(1)) {
			    case TOKEN_REF:
			    case RULE_REF:
			    case STRING_LITERAL:
			    case DOT:
			    case NOT:
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 510; 
			    	    	(var subCtx, _localError) = atom();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._atom = subCtx;
			    	    	}
			    	    }
			    	}
			    	break;
			    case LPAREN:
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 511; 
			    	    	(var subCtx, _localError) = block();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._block = subCtx;
			    	    	}
			    	    }
			    	}
			    	break;
			    default:
			    	{
			    		/* STG: ThrowNoViableAlt */
			    		// throw new NoViableAltException(this);

			    		var re = new NoViableAltException(this);
			    		_localctx.exception = re;
			    		_errHandler.ReportError(this, re);
			    		_errHandler.Recover(this, re);

			    		// ExitRule();
			    		return (_localctx, re);
			    	}
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class EbnfContext : ParserRuleContext {
		public BlockContext _block;
		public BlockSuffixContext _blockSuffix;
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockSuffixContext blockSuffix() {
			return GetRuleContext<BlockSuffixContext>(0);
		}
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
	}

	[RuleVersion(0)]
	public (EbnfContext, Exception? error) ebnf() {
		EbnfContext _localctx = new EbnfContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 100, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 514; 
			    	(var subCtx, _localError) = block();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._block = subCtx;
			    	}
			    }
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 516;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 515; 
			    	    	(var subCtx, _localError) = blockSuffix();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._blockSuffix = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class BlockSuffixContext : ParserRuleContext {
		public EbnfSuffixContext _ebnfSuffix;
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public BlockSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSuffix(this);
		}
	}

	[RuleVersion(0)]
	public (BlockSuffixContext, Exception? error) blockSuffix() {
		BlockSuffixContext _localctx = new BlockSuffixContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 102, RULE_blockSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: InvokeRule */
			    {
			    	this.State = 518; 
			    	(var subCtx, _localError) = ebnfSuffix();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._ebnfSuffix = subCtx;
			    	}
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class EbnfSuffixContext : ParserRuleContext {
		public ITerminalNode[] QUESTION() { return GetTokens(ANTLRv4Parser.QUESTION); }
		public ITerminalNode QUESTION(int i) {
			return GetToken(ANTLRv4Parser.QUESTION, i);
		}
		public ITerminalNode STAR() { return GetToken(ANTLRv4Parser.STAR, 0); }
		public ITerminalNode PLUS() { return GetToken(ANTLRv4Parser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
	}

	[RuleVersion(0)]
	public (EbnfSuffixContext, Exception? error) ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 104, RULE_ebnfSuffix);
		int _la;
		try {
			/* STG: LL1AltBlock */
			this.State = 532;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 520; 
				    Match(QUESTION);
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 522;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==QUESTION) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: MatchToken */
				    	    this.State = 521; 
				    	    Match(QUESTION);
				    	}
				    }

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 524; 
				    Match(STAR);
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 526;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==QUESTION) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: MatchToken */
				    	    this.State = 525; 
				    	    Match(QUESTION);
				    	}
				    }

				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 528; 
				    Match(PLUS);
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 530;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==QUESTION) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: MatchToken */
				    	    this.State = 529; 
				    	    Match(QUESTION);
				    	}
				    }

				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class LexerAtomContext : ParserRuleContext {
		public CharacterRangeContext _characterRange;
		public TerminalDefContext _terminalDef;
		public NotSetContext _notSet;
		public ElementOptionsContext _elementOptions;
		public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		public TerminalDefContext terminalDef() {
			return GetRuleContext<TerminalDefContext>(0);
		}
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(ANTLRv4Parser.LEXER_CHAR_SET, 0); }
		public ITerminalNode DOT() { return GetToken(ANTLRv4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public LexerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAtom(this);
		}
	}

	[RuleVersion(0)]
	public (LexerAtomContext, Exception? error) lexerAtom() {
		LexerAtomContext _localctx = new LexerAtomContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 106, RULE_lexerAtom);
		int _la;
		try {
			/* STG: AltBlock */
			this.State = 542;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 534; 
				    	(var subCtx, _localError) = characterRange();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._characterRange = subCtx;
				    	}
				    }
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 535; 
				    	(var subCtx, _localError) = terminalDef();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._terminalDef = subCtx;
				    	}
				    }
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 536; 
				    	(var subCtx, _localError) = notSet();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._notSet = subCtx;
				    	}
				    }
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 537; 
				    Match(LEXER_CHAR_SET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 538; 
				    Match(DOT);
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 540;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==LT) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 539; 
				    	    	(var subCtx, _localError) = elementOptions();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._elementOptions = subCtx;
				    	    	}
				    	    }
				    	}
				    }

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class AtomContext : ParserRuleContext {
		public TerminalDefContext _terminalDef;
		public RulerefContext _ruleref;
		public NotSetContext _notSet;
		public ElementOptionsContext _elementOptions;
		public TerminalDefContext terminalDef() {
			return GetRuleContext<TerminalDefContext>(0);
		}
		public RulerefContext ruleref() {
			return GetRuleContext<RulerefContext>(0);
		}
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(ANTLRv4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public (AtomContext, Exception? error) atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 108, RULE_atom);
		int _la;
		try {
			/* STG: LL1AltBlock */
			this.State = 551;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TOKEN_REF:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 544; 
				    	(var subCtx, _localError) = terminalDef();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._terminalDef = subCtx;
				    	}
				    }
				}
				break;
			case RULE_REF:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 545; 
				    	(var subCtx, _localError) = ruleref();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._ruleref = subCtx;
				    	}
				    }
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 3);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 546; 
				    	(var subCtx, _localError) = notSet();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._notSet = subCtx;
				    	}
				    }
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 4);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 547; 
				    Match(DOT);
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 549;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==LT) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 548; 
				    	    	(var subCtx, _localError) = elementOptions();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._elementOptions = subCtx;
				    	    	}
				    	    }
				    	}
				    }

				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class NotSetContext : ParserRuleContext {
		public SetElementContext _setElement;
		public BlockSetContext _blockSet;
		public ITerminalNode NOT() { return GetToken(ANTLRv4Parser.NOT, 0); }
		public SetElementContext setElement() {
			return GetRuleContext<SetElementContext>(0);
		}
		public BlockSetContext blockSet() {
			return GetRuleContext<BlockSetContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
	}

	[RuleVersion(0)]
	public (NotSetContext, Exception? error) notSet() {
		NotSetContext _localctx = new NotSetContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 110, RULE_notSet);
		try {
			/* STG: AltBlock */
			this.State = 557;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 553; 
				    Match(NOT);
				    /* STG: InvokeRule */
				    {
				    	this.State = 554; 
				    	(var subCtx, _localError) = setElement();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._setElement = subCtx;
				    	}
				    }
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 555; 
				    Match(NOT);
				    /* STG: InvokeRule */
				    {
				    	this.State = 556; 
				    	(var subCtx, _localError) = blockSet();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._blockSet = subCtx;
				    	}
				    }
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class BlockSetContext : ParserRuleContext {
		public SetElementContext _setElement;
		public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		public SetElementContext[] setElement() {
			return GetRuleContexts<SetElementContext>();
		}
		public SetElementContext setElement(int i) {
			return GetRuleContext<SetElementContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public BlockSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSet(this);
		}
	}

	[RuleVersion(0)]
	public (BlockSetContext, Exception? error) blockSet() {
		BlockSetContext _localctx = new BlockSetContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 112, RULE_blockSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 559; 
			    Match(LPAREN);
			    /* STG: InvokeRule */
			    {
			    	this.State = 560; 
			    	(var subCtx, _localError) = setElement();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._setElement = subCtx;
			    	}
			    }
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 565;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==OR) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: MatchToken */
			    	        this.State = 561; 
			    	        Match(OR);
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 562; 
			    	        	(var subCtx, _localError) = setElement();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._setElement = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 567;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			    /* STG: MatchToken */
			    this.State = 568; 
			    Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class SetElementContext : ParserRuleContext {
		public ElementOptionsContext _elementOptions;
		public CharacterRangeContext _characterRange;
		public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(ANTLRv4Parser.LEXER_CHAR_SET, 0); }
		public SetElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterSetElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitSetElement(this);
		}
	}

	[RuleVersion(0)]
	public (SetElementContext, Exception? error) setElement() {
		SetElementContext _localctx = new SetElementContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 114, RULE_setElement);
		int _la;
		try {
			/* STG: AltBlock */
			this.State = 580;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 570; 
				    Match(TOKEN_REF);
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 572;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==LT) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 571; 
				    	    	(var subCtx, _localError) = elementOptions();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._elementOptions = subCtx;
				    	    	}
				    	    }
				    	}
				    }

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 574; 
				    Match(STRING_LITERAL);
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 576;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==LT) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 575; 
				    	    	(var subCtx, _localError) = elementOptions();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._elementOptions = subCtx;
				    	    	}
				    	    }
				    	}
				    }

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 578; 
				    	(var subCtx, _localError) = characterRange();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._characterRange = subCtx;
				    	}
				    }
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 579; 
				    Match(LEXER_CHAR_SET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class BlockContext : ParserRuleContext {
		public OptionsSpecContext _optionsSpec;
		public RuleActionContext _ruleAction;
		public AltListContext _altList;
		public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public (BlockContext, Exception? error) block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 116, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 582; 
			    Match(LPAREN);
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 593;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << COLON) | (1L << AT))) != 0)) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: LL1OptionalBlockSingleAlt */
			    	    this.State = 584;
			    	    _errHandler.Sync(this);
			    	    _la = _input.La(1);
			    	    if (_la==OPTIONS) {
			    	    	{
			    	    	/* STG: CodeBlockForAlt */
			    	    		/* STG: locals */
			    	    		/* STG: preamble */
			    	    		/* STG: ops */
			    	    	    /* STG: InvokeRule */
			    	    	    {
			    	    	    	this.State = 583; 
			    	    	    	(var subCtx, _localError) = optionsSpec();
			    	    	    	if (_localError is not null) {
			    	    	    		if (_localError is RecognitionException re) {
			    	    	    			_localctx.exception = re;
			    	    	    			_errHandler.ReportError(this, re);
			    	    	    			_errHandler.Recover(this, re);
			    	    	    			return (_localctx, _localError);
			    	    	    		} else {
			    	    	    			throw _localError;
			    	    	    		}
			    	    	        } else {
			    	    	    		_localctx._optionsSpec = subCtx;
			    	    	    	}
			    	    	    }
			    	    	}
			    	    }

			    	    /* STG: LL1StarBlockSingleAlt */
			    	    this.State = 589;
			    	    _errHandler.Sync(this);
			    	    _la = _input.La(1);
			    	    while (_la==AT) {
			    	    	{
			    	    	/* STG: CodeBlockForAlt */
			    	    		/* STG: locals */
			    	    		/* STG: preamble */
			    	    		/* STG: ops */
			    	    	    {
			    	    	    /* STG: CodeBlockForAlt */
			    	    	    	/* STG: locals */
			    	    	    	/* STG: preamble */
			    	    	    	/* STG: ops */
			    	    	        /* STG: InvokeRule */
			    	    	        {
			    	    	        	this.State = 586; 
			    	    	        	(var subCtx, _localError) = ruleAction();
			    	    	        	if (_localError is not null) {
			    	    	        		if (_localError is RecognitionException re) {
			    	    	        			_localctx.exception = re;
			    	    	        			_errHandler.ReportError(this, re);
			    	    	        			_errHandler.Recover(this, re);
			    	    	        			return (_localctx, _localError);
			    	    	        		} else {
			    	    	        			throw _localError;
			    	    	        		}
			    	    	            } else {
			    	    	        		_localctx._ruleAction = subCtx;
			    	    	        	}
			    	    	        }
			    	    	    }
			    	    	}
			    	    	this.State = 591;
			    	    	_errHandler.Sync(this);
			    	    	_la = _input.La(1);
			    	    }
			    	    /* STG: MatchToken */
			    	    this.State = 592; 
			    	    Match(COLON);
			    	}
			    }

			    /* STG: InvokeRule */
			    {
			    	this.State = 595; 
			    	(var subCtx, _localError) = altList();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._altList = subCtx;
			    	}
			    }
			    /* STG: MatchToken */
			    this.State = 596; 
			    Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class RulerefContext : ParserRuleContext {
		public ArgActionBlockContext _argActionBlock;
		public ElementOptionsContext _elementOptions;
		public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public RulerefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleref(this);
		}
	}

	[RuleVersion(0)]
	public (RulerefContext, Exception? error) ruleref() {
		RulerefContext _localctx = new RulerefContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 118, RULE_ruleref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 598; 
			    Match(RULE_REF);
			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 600;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==BEGIN_ARGUMENT) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 599; 
			    	    	(var subCtx, _localError) = argActionBlock();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._argActionBlock = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			    /* STG: LL1OptionalBlockSingleAlt */
			    this.State = 603;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    if (_la==LT) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    /* STG: InvokeRule */
			    	    {
			    	    	this.State = 602; 
			    	    	(var subCtx, _localError) = elementOptions();
			    	    	if (_localError is not null) {
			    	    		if (_localError is RecognitionException re) {
			    	    			_localctx.exception = re;
			    	    			_errHandler.ReportError(this, re);
			    	    			_errHandler.Recover(this, re);
			    	    			return (_localctx, _localError);
			    	    		} else {
			    	    			throw _localError;
			    	    		}
			    	        } else {
			    	    		_localctx._elementOptions = subCtx;
			    	    	}
			    	    }
			    	}
			    }

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class CharacterRangeContext : ParserRuleContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(ANTLRv4Parser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(ANTLRv4Parser.STRING_LITERAL, i);
		}
		public ITerminalNode RANGE() { return GetToken(ANTLRv4Parser.RANGE, 0); }
		public CharacterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterCharacterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitCharacterRange(this);
		}
	}

	[RuleVersion(0)]
	public (CharacterRangeContext, Exception? error) characterRange() {
		CharacterRangeContext _localctx = new CharacterRangeContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 120, RULE_characterRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 605; 
			    Match(STRING_LITERAL);
			    /* STG: MatchToken */
			    this.State = 606; 
			    Match(RANGE);
			    /* STG: MatchToken */
			    this.State = 607; 
			    Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class TerminalDefContext : ParserRuleContext {
		public ElementOptionsContext _elementOptions;
		public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public TerminalDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterTerminalDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitTerminalDef(this);
		}
	}

	[RuleVersion(0)]
	public (TerminalDefContext, Exception? error) terminalDef() {
		TerminalDefContext _localctx = new TerminalDefContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 122, RULE_terminalDef);
		int _la;
		try {
			/* STG: LL1AltBlock */
			this.State = 617;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 609; 
				    Match(TOKEN_REF);
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 611;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==LT) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 610; 
				    	    	(var subCtx, _localError) = elementOptions();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._elementOptions = subCtx;
				    	    	}
				    	    }
				    	}
				    }

				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: MatchToken */
				    this.State = 613; 
				    Match(STRING_LITERAL);
				    /* STG: LL1OptionalBlockSingleAlt */
				    this.State = 615;
				    _errHandler.Sync(this);
				    _la = _input.La(1);
				    if (_la==LT) {
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 614; 
				    	    	(var subCtx, _localError) = elementOptions();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._elementOptions = subCtx;
				    	    	}
				    	    }
				    	}
				    }

				}
				break;
			default:
				{
					/* STG: ThrowNoViableAlt */
					// throw new NoViableAltException(this);

					var re = new NoViableAltException(this);
					_localctx.exception = re;
					_errHandler.ReportError(this, re);
					_errHandler.Recover(this, re);

					// ExitRule();
					return (_localctx, re);
				}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ElementOptionsContext : ParserRuleContext {
		public ElementOptionContext _elementOption;
		public ITerminalNode LT() { return GetToken(ANTLRv4Parser.LT, 0); }
		public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		public ITerminalNode GT() { return GetToken(ANTLRv4Parser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
	}

	[RuleVersion(0)]
	public (ElementOptionsContext, Exception? error) elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 124, RULE_elementOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: MatchToken */
			    this.State = 619; 
			    Match(LT);
			    /* STG: InvokeRule */
			    {
			    	this.State = 620; 
			    	(var subCtx, _localError) = elementOption();
			    	if (_localError is not null) {
			    		if (_localError is RecognitionException re) {
			    			_localctx.exception = re;
			    			_errHandler.ReportError(this, re);
			    			_errHandler.Recover(this, re);
			    			return (_localctx, _localError);
			    		} else {
			    			throw _localError;
			    		}
			        } else {
			    		_localctx._elementOption = subCtx;
			    	}
			    }
			    /* STG: LL1StarBlockSingleAlt */
			    this.State = 625;
			    _errHandler.Sync(this);
			    _la = _input.La(1);
			    while (_la==COMMA) {
			    	{
			    	/* STG: CodeBlockForAlt */
			    		/* STG: locals */
			    		/* STG: preamble */
			    		/* STG: ops */
			    	    {
			    	    /* STG: CodeBlockForAlt */
			    	    	/* STG: locals */
			    	    	/* STG: preamble */
			    	    	/* STG: ops */
			    	        /* STG: MatchToken */
			    	        this.State = 621; 
			    	        Match(COMMA);
			    	        /* STG: InvokeRule */
			    	        {
			    	        	this.State = 622; 
			    	        	(var subCtx, _localError) = elementOption();
			    	        	if (_localError is not null) {
			    	        		if (_localError is RecognitionException re) {
			    	        			_localctx.exception = re;
			    	        			_errHandler.ReportError(this, re);
			    	        			_errHandler.Recover(this, re);
			    	        			return (_localctx, _localError);
			    	        		} else {
			    	        			throw _localError;
			    	        		}
			    	            } else {
			    	        		_localctx._elementOption = subCtx;
			    	        	}
			    	        }
			    	    }
			    	}
			    	this.State = 627;
			    	_errHandler.Sync(this);
			    	_la = _input.La(1);
			    }
			    /* STG: MatchToken */
			    this.State = 628; 
			    Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class ElementOptionContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
	}

	[RuleVersion(0)]
	public (ElementOptionContext, Exception? error) elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 126, RULE_elementOption);
		try {
			/* STG: AltBlock */
			this.State = 637;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 630; 
				    	(var subCtx, _localError) = identifier();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._identifier = subCtx;
				    	}
				    }
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				/* STG: CodeBlockForAlt */
					/* STG: locals */
					/* STG: preamble */
					/* STG: ops */
				    /* STG: InvokeRule */
				    {
				    	this.State = 631; 
				    	(var subCtx, _localError) = identifier();
				    	if (_localError is not null) {
				    		if (_localError is RecognitionException re) {
				    			_localctx.exception = re;
				    			_errHandler.ReportError(this, re);
				    			_errHandler.Recover(this, re);
				    			return (_localctx, _localError);
				    		} else {
				    			throw _localError;
				    		}
				        } else {
				    		_localctx._identifier = subCtx;
				    	}
				    }
				    /* STG: MatchToken */
				    this.State = 632; 
				    Match(ASSIGN);
				    /* STG: LL1AltBlock */
				    this.State = 635;
				    _errHandler.Sync(this);
				    switch (_input.La(1)) {
				    case TOKEN_REF:
				    case RULE_REF:
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: InvokeRule */
				    	    {
				    	    	this.State = 633; 
				    	    	(var subCtx, _localError) = identifier();
				    	    	if (_localError is not null) {
				    	    		if (_localError is RecognitionException re) {
				    	    			_localctx.exception = re;
				    	    			_errHandler.ReportError(this, re);
				    	    			_errHandler.Recover(this, re);
				    	    			return (_localctx, _localError);
				    	    		} else {
				    	    			throw _localError;
				    	    		}
				    	        } else {
				    	    		_localctx._identifier = subCtx;
				    	    	}
				    	    }
				    	}
				    	break;
				    case STRING_LITERAL:
				    	{
				    	/* STG: CodeBlockForAlt */
				    		/* STG: locals */
				    		/* STG: preamble */
				    		/* STG: ops */
				    	    /* STG: MatchToken */
				    	    this.State = 634; 
				    	    Match(STRING_LITERAL);
				    	}
				    	break;
				    default:
				    	{
				    		/* STG: ThrowNoViableAlt */
				    		// throw new NoViableAltException(this);

				    		var re = new NoViableAltException(this);
				    		_localctx.exception = re;
				    		_errHandler.ReportError(this, re);
				    		_errHandler.Recover(this, re);

				    		// ExitRule();
				    		return (_localctx, re);
				    	}
				    }
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public (IdentifierContext, Exception? error) identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		Exception? _localError = default;
		EnterRule(_localctx, 128, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			/* STG: CodeBlockForAlt */
				/* STG: locals */
				/* STG: preamble */
				/* STG: ops */
			    /* STG: CommonSetStuff */
			    this.State = 639;
			    _la = _input.La(1);
			    if ( !(_la==TOKEN_REF || _la==RULE_REF) ) {
			    _errHandler.RecoverInline(this);
			    } else {
			    	if (_input.La(1) == TokenConstants.Eof) {
			    		matchedEOF = true;
			    	}

			    	_errHandler.ReportMatch(this);
			    	Consume();
			    }
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return (_localctx,_localError);
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3?\x284\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x3\x2\x3\x2\a\x2\x87\n\x2\f\x2\xE\x2\x8A"+
		"\v\x2\x3\x2\x3\x2\a\x2\x8E\n\x2\f\x2\xE\x2\x91\v\x2\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x9E\n\x4\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\xA5\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\xAB"+
		"\n\x6\f\x6\xE\x6\xAE\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3"+
		"\b\a\b\xB9\n\b\f\b\xE\b\xBC\v\b\x3\b\x3\b\x3\b\x5\b\xC1\n\b\x3\t\x3\t"+
		"\x3\t\x3\t\a\t\xC7\n\t\f\t\xE\t\xCA\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x5\n\xD3\n\n\x3\v\x3\v\x5\v\xD7\n\v\x3\v\x3\v\x3\f\x3\f\x5\f\xDD"+
		"\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\a\r\xE4\n\r\f\r\xE\r\xE7\v\r\x3\r\x5\r\xEA"+
		"\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xF0\n\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3"+
		"\xF\x3\xF\x5\xF\xF8\n\xF\x3\x10\x3\x10\a\x10\xFC\n\x10\f\x10\xE\x10\xFF"+
		"\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\a\x11\x105\n\x11\f\x11\xE\x11\x108"+
		"\v\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x110\n\x12\f\x12"+
		"\xE\x12\x113\v\x12\x3\x13\a\x13\x116\n\x13\f\x13\xE\x13\x119\v\x13\x3"+
		"\x14\x3\x14\x5\x14\x11D\n\x14\x3\x15\x5\x15\x120\n\x15\x3\x15\x3\x15\x5"+
		"\x15\x124\n\x15\x3\x15\x5\x15\x127\n\x15\x3\x15\x5\x15\x12A\n\x15\x3\x15"+
		"\x5\x15\x12D\n\x15\x3\x15\a\x15\x130\n\x15\f\x15\xE\x15\x133\v\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\a\x16\x13B\n\x16\f\x16\xE\x16"+
		"\x13E\v\x16\x3\x16\x5\x16\x141\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x19\x3\x19\x5\x19\x14C\n\x19\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x155\n\x1B\f\x1B\xE\x1B\x158\v\x1B\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x6\x1E\x162\n\x1E"+
		"\r\x1E\xE\x1E\x163\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3!\a!\x16D\n!\f!\xE"+
		"!\x170\v!\x3\"\x3\"\x3\"\x5\"\x175\n\"\x3#\x5#\x178\n#\x3#\x3#\x5#\x17C"+
		"\n#\x3#\x3#\x3#\x3#\x3$\x3$\x3%\x3%\x3%\a%\x187\n%\f%\xE%\x18A\v%\x3&"+
		"\x3&\x5&\x18E\n&\x3&\x5&\x191\n&\x3\'\x6\'\x194\n\'\r\'\xE\'\x195\x3\'"+
		"\x5\'\x199\n\'\x3(\x3(\x5(\x19D\n(\x3(\x3(\x5(\x1A1\n(\x3(\x3(\x5(\x1A5"+
		"\n(\x5(\x1A7\n(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\a*\x1B1\n*\f*\xE*\x1B4"+
		"\v*\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x1BC\n+\x3,\x3,\x5,\x1C0\n,\x3-\x3-\x5"+
		"-\x1C4\n-\x3.\x3.\x3.\a.\x1C9\n.\f.\xE.\x1CC\v.\x3/\x5/\x1CF\n/\x3/\x6"+
		"/\x1D2\n/\r/\xE/\x1D3\x3/\x5/\x1D7\n/\x3\x30\x3\x30\x3\x30\x5\x30\x1DC"+
		"\n\x30\x3\x30\x3\x30\x3\x30\x5\x30\x1E1\n\x30\x3\x30\x3\x30\x3\x30\x3"+
		"\x30\x5\x30\x1E7\n\x30\x5\x30\x1E9\n\x30\x5\x30\x1EB\n\x30\x3\x31\x3\x31"+
		"\x3\x31\x3\x31\a\x31\x1F1\n\x31\f\x31\xE\x31\x1F4\v\x31\x3\x31\x3\x31"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x1FD\n\x32\x3\x33\x3\x33\x3"+
		"\x33\x3\x33\x5\x33\x203\n\x33\x3\x34\x3\x34\x5\x34\x207\n\x34\x3\x35\x3"+
		"\x35\x3\x36\x3\x36\x5\x36\x20D\n\x36\x3\x36\x3\x36\x5\x36\x211\n\x36\x3"+
		"\x36\x3\x36\x5\x36\x215\n\x36\x5\x36\x217\n\x36\x3\x37\x3\x37\x3\x37\x3"+
		"\x37\x3\x37\x3\x37\x5\x37\x21F\n\x37\x5\x37\x221\n\x37\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x3\x38\x5\x38\x228\n\x38\x5\x38\x22A\n\x38\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x5\x39\x230\n\x39\x3:\x3:\x3:\x3:\a:\x236\n:\f:\xE:\x239\v"+
		":\x3:\x3:\x3;\x3;\x5;\x23F\n;\x3;\x3;\x5;\x243\n;\x3;\x3;\x5;\x247\n;"+
		"\x3<\x3<\x5<\x24B\n<\x3<\a<\x24E\n<\f<\xE<\x251\v<\x3<\x5<\x254\n<\x3"+
		"<\x3<\x3<\x3=\x3=\x5=\x25B\n=\x3=\x5=\x25E\n=\x3>\x3>\x3>\x3>\x3?\x3?"+
		"\x5?\x266\n?\x3?\x3?\x5?\x26A\n?\x5?\x26C\n?\x3@\x3@\x3@\x3@\a@\x272\n"+
		"@\f@\xE@\x275\v@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x27E"+
		"\n\x41\x5\x41\x280\n\x41\x3\x42\x3\x42\x3\x42\x2\x2\x2\x43\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2"+
		"\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36"+
		"\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2"+
		"T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2"+
		"r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x2\x5\x4\x2\x12\x12\x16\x18"+
		"\x4\x2**--\x3\x2\x3\x4\x2A9\x2\x84\x3\x2\x2\x2\x4\x94\x3\x2\x2\x2\x6\x9D"+
		"\x3\x2\x2\x2\b\xA4\x3\x2\x2\x2\n\xA6\x3\x2\x2\x2\f\xB1\x3\x2\x2\x2\xE"+
		"\xC0\x3\x2\x2\x2\x10\xC2\x3\x2\x2\x2\x12\xD2\x3\x2\x2\x2\x14\xD4\x3\x2"+
		"\x2\x2\x16\xDA\x3\x2\x2\x2\x18\xE0\x3\x2\x2\x2\x1A\xEB\x3\x2\x2\x2\x1C"+
		"\xF7\x3\x2\x2\x2\x1E\xF9\x3\x2\x2\x2 \x102\x3\x2\x2\x2\"\x10B\x3\x2\x2"+
		"\x2$\x117\x3\x2\x2\x2&\x11C\x3\x2\x2\x2(\x11F\x3\x2\x2\x2*\x13C\x3\x2"+
		"\x2\x2,\x142\x3\x2\x2\x2.\x146\x3\x2\x2\x2\x30\x14B\x3\x2\x2\x2\x32\x14D"+
		"\x3\x2\x2\x2\x34\x150\x3\x2\x2\x2\x36\x159\x3\x2\x2\x2\x38\x15C\x3\x2"+
		"\x2\x2:\x161\x3\x2\x2\x2<\x165\x3\x2\x2\x2>\x167\x3\x2\x2\x2@\x169\x3"+
		"\x2\x2\x2\x42\x171\x3\x2\x2\x2\x44\x177\x3\x2\x2\x2\x46\x181\x3\x2\x2"+
		"\x2H\x183\x3\x2\x2\x2J\x190\x3\x2\x2\x2L\x198\x3\x2\x2\x2N\x1A6\x3\x2"+
		"\x2\x2P\x1A8\x3\x2\x2\x2R\x1AC\x3\x2\x2\x2T\x1BB\x3\x2\x2\x2V\x1BF\x3"+
		"\x2\x2\x2X\x1C3\x3\x2\x2\x2Z\x1C5\x3\x2\x2\x2\\\x1D6\x3\x2\x2\x2^\x1EA"+
		"\x3\x2\x2\x2`\x1EC\x3\x2\x2\x2\x62\x1FC\x3\x2\x2\x2\x64\x1FE\x3\x2\x2"+
		"\x2\x66\x204\x3\x2\x2\x2h\x208\x3\x2\x2\x2j\x216\x3\x2\x2\x2l\x220\x3"+
		"\x2\x2\x2n\x229\x3\x2\x2\x2p\x22F\x3\x2\x2\x2r\x231\x3\x2\x2\x2t\x246"+
		"\x3\x2\x2\x2v\x248\x3\x2\x2\x2x\x258\x3\x2\x2\x2z\x25F\x3\x2\x2\x2|\x26B"+
		"\x3\x2\x2\x2~\x26D\x3\x2\x2\x2\x80\x27F\x3\x2\x2\x2\x82\x281\x3\x2\x2"+
		"\x2\x84\x88\x5\x4\x3\x2\x85\x87\x5\b\x5\x2\x86\x85\x3\x2\x2\x2\x87\x8A"+
		"\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8B\x3\x2\x2"+
		"\x2\x8A\x88\x3\x2\x2\x2\x8B\x8F\x5$\x13\x2\x8C\x8E\x5\"\x12\x2\x8D\x8C"+
		"\x3\x2\x2\x2\x8E\x91\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x8F\x90\x3\x2\x2"+
		"\x2\x90\x92\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x92\x93\a\x2\x2\x3\x93\x3"+
		"\x3\x2\x2\x2\x94\x95\x5\x6\x4\x2\x95\x96\x5\x82\x42\x2\x96\x97\a\"\x2"+
		"\x2\x97\x5\x3\x2\x2\x2\x98\x99\a\x13\x2\x2\x99\x9E\a\x15\x2\x2\x9A\x9B"+
		"\a\x14\x2\x2\x9B\x9E\a\x15\x2\x2\x9C\x9E\a\x15\x2\x2\x9D\x98\x3\x2\x2"+
		"\x2\x9D\x9A\x3\x2\x2\x2\x9D\x9C\x3\x2\x2\x2\x9E\a\x3\x2\x2\x2\x9F\xA5"+
		"\x5\n\x6\x2\xA0\xA5\x5\x10\t\x2\xA1\xA5\x5\x14\v\x2\xA2\xA5\x5\x16\f\x2"+
		"\xA3\xA5\x5\x1A\xE\x2\xA4\x9F\x3\x2\x2\x2\xA4\xA0\x3\x2\x2\x2\xA4\xA1"+
		"\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA3\x3\x2\x2\x2\xA5\t\x3\x2\x2\x2"+
		"\xA6\xAC\a\xE\x2\x2\xA7\xA8\x5\f\a\x2\xA8\xA9\a\"\x2\x2\xA9\xAB\x3\x2"+
		"\x2\x2\xAA\xA7\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAC"+
		"\xAD\x3\x2\x2\x2\xAD\xAF\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAF\xB0\a&\x2"+
		"\x2\xB0\v\x3\x2\x2\x2\xB1\xB2\x5\x82\x42\x2\xB2\xB3\a*\x2\x2\xB3\xB4\x5"+
		"\xE\b\x2\xB4\r\x3\x2\x2\x2\xB5\xBA\x5\x82\x42\x2\xB6\xB7\a\x32\x2\x2\xB7"+
		"\xB9\x5\x82\x42\x2\xB8\xB6\x3\x2\x2\x2\xB9\xBC\x3\x2\x2\x2\xBA\xB8\x3"+
		"\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xC1\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2"+
		"\xBD\xC1\a\n\x2\x2\xBE\xC1\x5\x1E\x10\x2\xBF\xC1\a\t\x2\x2\xC0\xB5\x3"+
		"\x2\x2\x2\xC0\xBD\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xBF\x3\x2\x2\x2"+
		"\xC1\xF\x3\x2\x2\x2\xC2\xC3\a\x11\x2\x2\xC3\xC8\x5\x12\n\x2\xC4\xC5\a"+
		"!\x2\x2\xC5\xC7\x5\x12\n\x2\xC6\xC4\x3\x2\x2\x2\xC7\xCA\x3\x2\x2\x2\xC8"+
		"\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCB\x3\x2\x2\x2\xCA\xC8\x3\x2"+
		"\x2\x2\xCB\xCC\a\"\x2\x2\xCC\x11\x3\x2\x2\x2\xCD\xCE\x5\x82\x42\x2\xCE"+
		"\xCF\a*\x2\x2\xCF\xD0\x5\x82\x42\x2\xD0\xD3\x3\x2\x2\x2\xD1\xD3\x5\x82"+
		"\x42\x2\xD2\xCD\x3\x2\x2\x2\xD2\xD1\x3\x2\x2\x2\xD3\x13\x3\x2\x2\x2\xD4"+
		"\xD6\a\xF\x2\x2\xD5\xD7\x5\x18\r\x2\xD6\xD5\x3\x2\x2\x2\xD6\xD7\x3\x2"+
		"\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xD9\a&\x2\x2\xD9\x15\x3\x2\x2\x2\xDA\xDC"+
		"\a\x10\x2\x2\xDB\xDD\x5\x18\r\x2\xDC\xDB\x3\x2\x2\x2\xDC\xDD\x3\x2\x2"+
		"\x2\xDD\xDE\x3\x2\x2\x2\xDE\xDF\a&\x2\x2\xDF\x17\x3\x2\x2\x2\xE0\xE5\x5"+
		"\x82\x42\x2\xE1\xE2\a!\x2\x2\xE2\xE4\x5\x82\x42\x2\xE3\xE1\x3\x2\x2\x2"+
		"\xE4\xE7\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE9\x3"+
		"\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE8\xEA\a!\x2\x2\xE9\xE8\x3\x2\x2\x2\xE9"+
		"\xEA\x3\x2\x2\x2\xEA\x19\x3\x2\x2\x2\xEB\xEF\a\x33\x2\x2\xEC\xED\x5\x1C"+
		"\xF\x2\xED\xEE\a \x2\x2\xEE\xF0\x3\x2\x2\x2\xEF\xEC\x3\x2\x2\x2\xEF\xF0"+
		"\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF2\x5\x82\x42\x2\xF2\xF3\x5\x1E"+
		"\x10\x2\xF3\x1B\x3\x2\x2\x2\xF4\xF8\x5\x82\x42\x2\xF5\xF8\a\x13\x2\x2"+
		"\xF6\xF8\a\x14\x2\x2\xF7\xF4\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF6\x3"+
		"\x2\x2\x2\xF8\x1D\x3\x2\x2\x2\xF9\xFD\a\r\x2\x2\xFA\xFC\a>\x2\x2\xFB\xFA"+
		"\x3\x2\x2\x2\xFC\xFF\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFE\x3\x2\x2"+
		"\x2\xFE\x100\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\x100\x101\a<\x2\x2\x101\x1F"+
		"\x3\x2\x2\x2\x102\x106\a\f\x2\x2\x103\x105\a;\x2\x2\x104\x103\x3\x2\x2"+
		"\x2\x105\x108\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2"+
		"\x107\x109\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x109\x10A\a\x39\x2\x2\x10A"+
		"!\x3\x2\x2\x2\x10B\x10C\a\x1E\x2\x2\x10C\x10D\x5\x82\x42\x2\x10D\x111"+
		"\a\"\x2\x2\x10E\x110\x5\x44#\x2\x10F\x10E\x3\x2\x2\x2\x110\x113\x3\x2"+
		"\x2\x2\x111\x10F\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112#\x3\x2\x2\x2\x113"+
		"\x111\x3\x2\x2\x2\x114\x116\x5&\x14\x2\x115\x114\x3\x2\x2\x2\x116\x119"+
		"\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118%\x3\x2\x2"+
		"\x2\x119\x117\x3\x2\x2\x2\x11A\x11D\x5(\x15\x2\x11B\x11D\x5\x44#\x2\x11C"+
		"\x11A\x3\x2\x2\x2\x11C\x11B\x3\x2\x2\x2\x11D\'\x3\x2\x2\x2\x11E\x120\x5"+
		":\x1E\x2\x11F\x11E\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x121\x3\x2\x2"+
		"\x2\x121\x123\a\x4\x2\x2\x122\x124\x5 \x11\x2\x123\x122\x3\x2\x2\x2\x123"+
		"\x124\x3\x2\x2\x2\x124\x126\x3\x2\x2\x2\x125\x127\x5\x32\x1A\x2\x126\x125"+
		"\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x129\x3\x2\x2\x2\x128\x12A\x5"+
		"\x34\x1B\x2\x129\x128\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x12C\x3\x2"+
		"\x2\x2\x12B\x12D\x5\x36\x1C\x2\x12C\x12B\x3\x2\x2\x2\x12C\x12D\x3\x2\x2"+
		"\x2\x12D\x131\x3\x2\x2\x2\x12E\x130\x5\x30\x19\x2\x12F\x12E\x3\x2\x2\x2"+
		"\x130\x133\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132"+
		"\x134\x3\x2\x2\x2\x133\x131\x3\x2\x2\x2\x134\x135\a\x1F\x2\x2\x135\x136"+
		"\x5> \x2\x136\x137\a\"\x2\x2\x137\x138\x5*\x16\x2\x138)\x3\x2\x2\x2\x139"+
		"\x13B\x5,\x17\x2\x13A\x139\x3\x2\x2\x2\x13B\x13E\x3\x2\x2\x2\x13C\x13A"+
		"\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x140\x3\x2\x2\x2\x13E\x13C\x3"+
		"\x2\x2\x2\x13F\x141\x5.\x18\x2\x140\x13F\x3\x2\x2\x2\x140\x141\x3\x2\x2"+
		"\x2\x141+\x3\x2\x2\x2\x142\x143\a\x1C\x2\x2\x143\x144\x5 \x11\x2\x144"+
		"\x145\x5\x1E\x10\x2\x145-\x3\x2\x2\x2\x146\x147\a\x1D\x2\x2\x147\x148"+
		"\x5\x1E\x10\x2\x148/\x3\x2\x2\x2\x149\x14C\x5\n\x6\x2\x14A\x14C\x5\x38"+
		"\x1D\x2\x14B\x149\x3\x2\x2\x2\x14B\x14A\x3\x2\x2\x2\x14C\x31\x3\x2\x2"+
		"\x2\x14D\x14E\a\x19\x2\x2\x14E\x14F\x5 \x11\x2\x14F\x33\x3\x2\x2\x2\x150"+
		"\x151\a\x1B\x2\x2\x151\x156\x5\x82\x42\x2\x152\x153\a!\x2\x2\x153\x155"+
		"\x5\x82\x42\x2\x154\x152\x3\x2\x2\x2\x155\x158\x3\x2\x2\x2\x156\x154\x3"+
		"\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x35\x3\x2\x2\x2\x158\x156\x3\x2\x2"+
		"\x2\x159\x15A\a\x1A\x2\x2\x15A\x15B\x5 \x11\x2\x15B\x37\x3\x2\x2\x2\x15C"+
		"\x15D\a\x33\x2\x2\x15D\x15E\x5\x82\x42\x2\x15E\x15F\x5\x1E\x10\x2\x15F"+
		"\x39\x3\x2\x2\x2\x160\x162\x5<\x1F\x2\x161\x160\x3\x2\x2\x2\x162\x163"+
		"\x3\x2\x2\x2\x163\x161\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164;\x3\x2\x2"+
		"\x2\x165\x166\t\x2\x2\x2\x166=\x3\x2\x2\x2\x167\x168\x5@!\x2\x168?\x3"+
		"\x2\x2\x2\x169\x16E\x5\x42\"\x2\x16A\x16B\a/\x2\x2\x16B\x16D\x5\x42\""+
		"\x2\x16C\x16A\x3\x2\x2\x2\x16D\x170\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2"+
		"\x16E\x16F\x3\x2\x2\x2\x16F\x41\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x171"+
		"\x174\x5\\/\x2\x172\x173\a\x34\x2\x2\x173\x175\x5\x82\x42\x2\x174\x172"+
		"\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x43\x3\x2\x2\x2\x176\x178\a\x12"+
		"\x2\x2\x177\x176\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x179\x3\x2\x2"+
		"\x2\x179\x17B\a\x3\x2\x2\x17A\x17C\x5\n\x6\x2\x17B\x17A\x3\x2\x2\x2\x17B"+
		"\x17C\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x17E\a\x1F\x2\x2\x17E\x17F"+
		"\x5\x46$\x2\x17F\x180\a\"\x2\x2\x180\x45\x3\x2\x2\x2\x181\x182\x5H%\x2"+
		"\x182G\x3\x2\x2\x2\x183\x188\x5J&\x2\x184\x185\a/\x2\x2\x185\x187\x5J"+
		"&\x2\x186\x184\x3\x2\x2\x2\x187\x18A\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2"+
		"\x188\x189\x3\x2\x2\x2\x189I\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18B\x18D"+
		"\x5L\'\x2\x18C\x18E\x5R*\x2\x18D\x18C\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2"+
		"\x18E\x191\x3\x2\x2\x2\x18F\x191\x3\x2\x2\x2\x190\x18B\x3\x2\x2\x2\x190"+
		"\x18F\x3\x2\x2\x2\x191K\x3\x2\x2\x2\x192\x194\x5N(\x2\x193\x192\x3\x2"+
		"\x2\x2\x194\x195\x3\x2\x2\x2\x195\x193\x3\x2\x2\x2\x195\x196\x3\x2\x2"+
		"\x2\x196\x199\x3\x2\x2\x2\x197\x199\x3\x2\x2\x2\x198\x193\x3\x2\x2\x2"+
		"\x198\x197\x3\x2\x2\x2\x199M\x3\x2\x2\x2\x19A\x19C\x5l\x37\x2\x19B\x19D"+
		"\x5j\x36\x2\x19C\x19B\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D\x1A7\x3\x2"+
		"\x2\x2\x19E\x1A0\x5P)\x2\x19F\x1A1\x5j\x36\x2\x1A0\x19F\x3\x2\x2\x2\x1A0"+
		"\x1A1\x3\x2\x2\x2\x1A1\x1A7\x3\x2\x2\x2\x1A2\x1A4\x5\x1E\x10\x2\x1A3\x1A5"+
		"\a+\x2\x2\x1A4\x1A3\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5\x1A7\x3\x2"+
		"\x2\x2\x1A6\x19A\x3\x2\x2\x2\x1A6\x19E\x3\x2\x2\x2\x1A6\x1A2\x3\x2\x2"+
		"\x2\x1A7O\x3\x2\x2\x2\x1A8\x1A9\a#\x2\x2\x1A9\x1AA\x5H%\x2\x1AA\x1AB\a"+
		"$\x2\x2\x1ABQ\x3\x2\x2\x2\x1AC\x1AD\a\'\x2\x2\x1AD\x1B2\x5T+\x2\x1AE\x1AF"+
		"\a!\x2\x2\x1AF\x1B1\x5T+\x2\x1B0\x1AE\x3\x2\x2\x2\x1B1\x1B4\x3\x2\x2\x2"+
		"\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3S\x3\x2\x2\x2\x1B4\x1B2"+
		"\x3\x2\x2\x2\x1B5\x1B6\x5V,\x2\x1B6\x1B7\a#\x2\x2\x1B7\x1B8\x5X-\x2\x1B8"+
		"\x1B9\a$\x2\x2\x1B9\x1BC\x3\x2\x2\x2\x1BA\x1BC\x5V,\x2\x1BB\x1B5\x3\x2"+
		"\x2\x2\x1BB\x1BA\x3\x2\x2\x2\x1BCU\x3\x2\x2\x2\x1BD\x1C0\x5\x82\x42\x2"+
		"\x1BE\x1C0\a\x1E\x2\x2\x1BF\x1BD\x3\x2\x2\x2\x1BF\x1BE\x3\x2\x2\x2\x1C0"+
		"W\x3\x2\x2\x2\x1C1\x1C4\x5\x82\x42\x2\x1C2\x1C4\a\t\x2\x2\x1C3\x1C1\x3"+
		"\x2\x2\x2\x1C3\x1C2\x3\x2\x2\x2\x1C4Y\x3\x2\x2\x2\x1C5\x1CA\x5\\/\x2\x1C6"+
		"\x1C7\a/\x2\x2\x1C7\x1C9\x5\\/\x2\x1C8\x1C6\x3\x2\x2\x2\x1C9\x1CC\x3\x2"+
		"\x2\x2\x1CA\x1C8\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CB[\x3\x2\x2\x2\x1CC"+
		"\x1CA\x3\x2\x2\x2\x1CD\x1CF\x5~@\x2\x1CE\x1CD\x3\x2\x2\x2\x1CE\x1CF\x3"+
		"\x2\x2\x2\x1CF\x1D1\x3\x2\x2\x2\x1D0\x1D2\x5^\x30\x2\x1D1\x1D0\x3\x2\x2"+
		"\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2"+
		"\x1D4\x1D7\x3\x2\x2\x2\x1D5\x1D7\x3\x2\x2\x2\x1D6\x1CE\x3\x2\x2\x2\x1D6"+
		"\x1D5\x3\x2\x2\x2\x1D7]\x3\x2\x2\x2\x1D8\x1DB\x5\x64\x33\x2\x1D9\x1DC"+
		"\x5j\x36\x2\x1DA\x1DC\x3\x2\x2\x2\x1DB\x1D9\x3\x2\x2\x2\x1DB\x1DA\x3\x2"+
		"\x2\x2\x1DC\x1EB\x3\x2\x2\x2\x1DD\x1E0\x5n\x38\x2\x1DE\x1E1\x5j\x36\x2"+
		"\x1DF\x1E1\x3\x2\x2\x2\x1E0\x1DE\x3\x2\x2\x2\x1E0\x1DF\x3\x2\x2\x2\x1E1"+
		"\x1EB\x3\x2\x2\x2\x1E2\x1EB\x5\x66\x34\x2\x1E3\x1E8\x5\x1E\x10\x2\x1E4"+
		"\x1E6\a+\x2\x2\x1E5\x1E7\x5`\x31\x2\x1E6\x1E5\x3\x2\x2\x2\x1E6\x1E7\x3"+
		"\x2\x2\x2\x1E7\x1E9\x3\x2\x2\x2\x1E8\x1E4\x3\x2\x2\x2\x1E8\x1E9\x3\x2"+
		"\x2\x2\x1E9\x1EB\x3\x2\x2\x2\x1EA\x1D8\x3\x2\x2\x2\x1EA\x1DD\x3\x2\x2"+
		"\x2\x1EA\x1E2\x3\x2\x2\x2\x1EA\x1E3\x3\x2\x2\x2\x1EB_\x3\x2\x2\x2\x1EC"+
		"\x1ED\a(\x2\x2\x1ED\x1F2\x5\x62\x32\x2\x1EE\x1EF\a!\x2\x2\x1EF\x1F1\x5"+
		"\x62\x32\x2\x1F0\x1EE\x3\x2\x2\x2\x1F1\x1F4\x3\x2\x2\x2\x1F2\x1F0\x3\x2"+
		"\x2\x2\x1F2\x1F3\x3\x2\x2\x2\x1F3\x1F5\x3\x2\x2\x2\x1F4\x1F2\x3\x2\x2"+
		"\x2\x1F5\x1F6\a)\x2\x2\x1F6\x61\x3\x2\x2\x2\x1F7\x1FD\x5\x80\x41\x2\x1F8"+
		"\x1F9\x5\x82\x42\x2\x1F9\x1FA\a*\x2\x2\x1FA\x1FB\x5\x1E\x10\x2\x1FB\x1FD"+
		"\x3\x2\x2\x2\x1FC\x1F7\x3\x2\x2\x2\x1FC\x1F8\x3\x2\x2\x2\x1FD\x63\x3\x2"+
		"\x2\x2\x1FE\x1FF\x5\x82\x42\x2\x1FF\x202\t\x3\x2\x2\x200\x203\x5n\x38"+
		"\x2\x201\x203\x5v<\x2\x202\x200\x3\x2\x2\x2\x202\x201\x3\x2\x2\x2\x203"+
		"\x65\x3\x2\x2\x2\x204\x206\x5v<\x2\x205\x207\x5h\x35\x2\x206\x205\x3\x2"+
		"\x2\x2\x206\x207\x3\x2\x2\x2\x207g\x3\x2\x2\x2\x208\x209\x5j\x36\x2\x209"+
		"i\x3\x2\x2\x2\x20A\x20C\a+\x2\x2\x20B\x20D\a+\x2\x2\x20C\x20B\x3\x2\x2"+
		"\x2\x20C\x20D\x3\x2\x2\x2\x20D\x217\x3\x2\x2\x2\x20E\x210\a,\x2\x2\x20F"+
		"\x211\a+\x2\x2\x210\x20F\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211\x217\x3"+
		"\x2\x2\x2\x212\x214\a.\x2\x2\x213\x215\a+\x2\x2\x214\x213\x3\x2\x2\x2"+
		"\x214\x215\x3\x2\x2\x2\x215\x217\x3\x2\x2\x2\x216\x20A\x3\x2\x2\x2\x216"+
		"\x20E\x3\x2\x2\x2\x216\x212\x3\x2\x2\x2\x217k\x3\x2\x2\x2\x218\x221\x5"+
		"z>\x2\x219\x221\x5|?\x2\x21A\x221\x5p\x39\x2\x21B\x221\a\x5\x2\x2\x21C"+
		"\x21E\a\x32\x2\x2\x21D\x21F\x5~@\x2\x21E\x21D\x3\x2\x2\x2\x21E\x21F\x3"+
		"\x2\x2\x2\x21F\x221\x3\x2\x2\x2\x220\x218\x3\x2\x2\x2\x220\x219\x3\x2"+
		"\x2\x2\x220\x21A\x3\x2\x2\x2\x220\x21B\x3\x2\x2\x2\x220\x21C\x3\x2\x2"+
		"\x2\x221m\x3\x2\x2\x2\x222\x22A\x5|?\x2\x223\x22A\x5x=\x2\x224\x22A\x5"+
		"p\x39\x2\x225\x227\a\x32\x2\x2\x226\x228\x5~@\x2\x227\x226\x3\x2\x2\x2"+
		"\x227\x228\x3\x2\x2\x2\x228\x22A\x3\x2\x2\x2\x229\x222\x3\x2\x2\x2\x229"+
		"\x223\x3\x2\x2\x2\x229\x224\x3\x2\x2\x2\x229\x225\x3\x2\x2\x2\x22Ao\x3"+
		"\x2\x2\x2\x22B\x22C\a\x35\x2\x2\x22C\x230\x5t;\x2\x22D\x22E\a\x35\x2\x2"+
		"\x22E\x230\x5r:\x2\x22F\x22B\x3\x2\x2\x2\x22F\x22D\x3\x2\x2\x2\x230q\x3"+
		"\x2\x2\x2\x231\x232\a#\x2\x2\x232\x237\x5t;\x2\x233\x234\a/\x2\x2\x234"+
		"\x236\x5t;\x2\x235\x233\x3\x2\x2\x2\x236\x239\x3\x2\x2\x2\x237\x235\x3"+
		"\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238\x23A\x3\x2\x2\x2\x239\x237\x3\x2"+
		"\x2\x2\x23A\x23B\a$\x2\x2\x23Bs\x3\x2\x2\x2\x23C\x23E\a\x3\x2\x2\x23D"+
		"\x23F\x5~@\x2\x23E\x23D\x3\x2\x2\x2\x23E\x23F\x3\x2\x2\x2\x23F\x247\x3"+
		"\x2\x2\x2\x240\x242\a\n\x2\x2\x241\x243\x5~@\x2\x242\x241\x3\x2\x2\x2"+
		"\x242\x243\x3\x2\x2\x2\x243\x247\x3\x2\x2\x2\x244\x247\x5z>\x2\x245\x247"+
		"\a\x5\x2\x2\x246\x23C\x3\x2\x2\x2\x246\x240\x3\x2\x2\x2\x246\x244\x3\x2"+
		"\x2\x2\x246\x245\x3\x2\x2\x2\x247u\x3\x2\x2\x2\x248\x253\a#\x2\x2\x249"+
		"\x24B\x5\n\x6\x2\x24A\x249\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B\x24F"+
		"\x3\x2\x2\x2\x24C\x24E\x5\x38\x1D\x2\x24D\x24C\x3\x2\x2\x2\x24E\x251\x3"+
		"\x2\x2\x2\x24F\x24D\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x252\x3\x2"+
		"\x2\x2\x251\x24F\x3\x2\x2\x2\x252\x254\a\x1F\x2\x2\x253\x24A\x3\x2\x2"+
		"\x2\x253\x254\x3\x2\x2\x2\x254\x255\x3\x2\x2\x2\x255\x256\x5Z.\x2\x256"+
		"\x257\a$\x2\x2\x257w\x3\x2\x2\x2\x258\x25A\a\x4\x2\x2\x259\x25B\x5 \x11"+
		"\x2\x25A\x259\x3\x2\x2\x2\x25A\x25B\x3\x2\x2\x2\x25B\x25D\x3\x2\x2\x2"+
		"\x25C\x25E\x5~@\x2\x25D\x25C\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25Ey\x3"+
		"\x2\x2\x2\x25F\x260\a\n\x2\x2\x260\x261\a\x31\x2\x2\x261\x262\a\n\x2\x2"+
		"\x262{\x3\x2\x2\x2\x263\x265\a\x3\x2\x2\x264\x266\x5~@\x2\x265\x264\x3"+
		"\x2\x2\x2\x265\x266\x3\x2\x2\x2\x266\x26C\x3\x2\x2\x2\x267\x269\a\n\x2"+
		"\x2\x268\x26A\x5~@\x2\x269\x268\x3\x2\x2\x2\x269\x26A\x3\x2\x2\x2\x26A"+
		"\x26C\x3\x2\x2\x2\x26B\x263\x3\x2\x2\x2\x26B\x267\x3\x2\x2\x2\x26C}\x3"+
		"\x2\x2\x2\x26D\x26E\a(\x2\x2\x26E\x273\x5\x80\x41\x2\x26F\x270\a!\x2\x2"+
		"\x270\x272\x5\x80\x41\x2\x271\x26F\x3\x2\x2\x2\x272\x275\x3\x2\x2\x2\x273"+
		"\x271\x3\x2\x2\x2\x273\x274\x3\x2\x2\x2\x274\x276\x3\x2\x2\x2\x275\x273"+
		"\x3\x2\x2\x2\x276\x277\a)\x2\x2\x277\x7F\x3\x2\x2\x2\x278\x280\x5\x82"+
		"\x42\x2\x279\x27A\x5\x82\x42\x2\x27A\x27D\a*\x2\x2\x27B\x27E\x5\x82\x42"+
		"\x2\x27C\x27E\a\n\x2\x2\x27D\x27B\x3\x2\x2\x2\x27D\x27C\x3\x2\x2\x2\x27E"+
		"\x280\x3\x2\x2\x2\x27F\x278\x3\x2\x2\x2\x27F\x279\x3\x2\x2\x2\x280\x81"+
		"\x3\x2\x2\x2\x281\x282\t\x4\x2\x2\x282\x83\x3\x2\x2\x2W\x88\x8F\x9D\xA4"+
		"\xAC\xBA\xC0\xC8\xD2\xD6\xDC\xE5\xE9\xEF\xF7\xFD\x106\x111\x117\x11C\x11F"+
		"\x123\x126\x129\x12C\x131\x13C\x140\x14B\x156\x163\x16E\x174\x177\x17B"+
		"\x188\x18D\x190\x195\x198\x19C\x1A0\x1A4\x1A6\x1B2\x1BB\x1BF\x1C3\x1CA"+
		"\x1CE\x1D3\x1D6\x1DB\x1E0\x1E6\x1E8\x1EA\x1F2\x1FC\x202\x206\x20C\x210"+
		"\x214\x216\x21E\x220\x227\x229\x22F\x237\x23E\x242\x246\x24A\x24F\x253"+
		"\x25A\x25D\x265\x269\x26B\x273\x27D\x27F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TestAntlr4
